{
    "patterns_by_concept_group": {
        "error_handling-loops": {
            "iteration and condition checking": 1.0,
            "early return for empty list": 3.0,
            "list": 4.5,
            "iteration": 2.0,
            "list slicing": 1.0,
            "built-in slicing for reverse": 1.0,
            "iteration with error handling": 1.0,
            "early skipping of non-integer elements": 1.0,
            "iteration and filtering": 1.0,
            "early skipping of non-integers": 1.0,
            "filtering with type checking": 1.0,
            "early exit on type mismatch": 1.0,
            "iteration with type checking": 1.0,
            "early exit on non-integer types": 1.0,
            "iteration and type checking": 1.0,
            "early filtering of non-string elements": 1.0
        },
        "loops-recursion": {
            "recursion": 5.0,
            "tail recursion": 1.0,
            "none": 3.0,
            "divide and conquer": 1.0,
            "string": 1.0,
            "base case to prevent infinite recursion": 1.0
        },
        "conditionals-data_structures": {
            "iterative approach": 1.0,
            "simple conditional checks": 1.0,
            "list": 2.0,
            "conditional check": 1.0,
            "direct conditional evaluation": 1.0,
            "conditional logic": 1.0,
            "none needed due to simplicity": 1.0,
            "none": 1.0,
            "conditional checks": 1.0,
            "conditional statements": 1.0
        },
        "algorithms-conditionals": {
            "conditional logic": 3.0,
            "conditional statements": 2.0
        },
        "conditionals-sorting": {
            "sorting and filtering": 2.0,
            "list comprehension for filtering": 1.5,
            "list": 5.0,
            "list comprehension": 1.0,
            "use of built-in functions for efficiency": 1.0,
            "sorting": 1.0,
            "use of built-in sorting function": 1.0,
            "list comprehension for concise filtering": 1.0,
            "filtering and sorting": 1.0,
            "categorization and sorting": 1.5,
            "single pass categorization after sorting": 1.0,
            "dictionary": 3.5,
            "classification and sorting": 1.0,
            "sorting before classification": 1.0,
            "sorting before categorization": 1.0,
            "built-in sort function": 1.0,
            "sorting and grouping": 1.0,
            "sorting before grouping to ensure order within groups": 1.0,
            "sorting and conditional classification": 1.0,
            "sorting with custom key": 1.0,
            "None": 1.0
        },
        "conditionals-dynamic_programming": {
            "dynamic programming": 7.0,
            "bottom-up approach": 3.0,
            "array": 5.5,
            "iterative approach": 2.0,
            "filter and sum": 1.0,
            "sorting to facilitate greedy selection": 1.0,
            "list": 2.0,
            "iterative computation": 2.0,
            "state transition": 1.0,
            "recursive with memoization": 1.0,
            "memoization": 1.0,
            "dictionary": 1.0,
            "iteration and conditional filtering": 1.0,
            "early filtering of non-relevant elements": 1.0,
            "in-place updates": 1.0,
            "iterative table filling": 1.0,
            "2D array": 3.0,
            "precomputation of palindrome substrings": 1.0
        },
        "data_structures-error_handling": {
            "iterative processing": 1.5,
            "none": 3.0,
            "list": 4.0,
            "sequential processing": 1.0,
            "linked list manipulation": 1.0,
            "singly linked list": 1.0,
            "simulation of stack operations": 1.0,
            "simulation of queue operations": 1.0,
            "string parsing and frequency counting": 1.0,
            "regular expressions for parsing": 1.0,
            "dictionary": 1.5,
            "command parsing and execution": 1.0,
            "early error detection": 1.0,
            "iterative parsing": 1.0,
            "early termination": 1.0,
            "skip whitespace": 1.0,
            "string": 1.0,
            "early exit for empty stack": 1.0,
            "linear data structure manipulation": 1.0,
            "linked list operations": 1.0,
            "linked list": 1.0,
            "hash table implementation": 1.0,
            "simple iterative processing": 1.0
        },
        "algorithms-error_handling": {
            "conditional checks": 3.0,
            "early return for error handling": 1.0,
            "integer": 1.0,
            "conditional checking": 1.0,
            "primitive types": 1.0,
            "early returns to avoid unnecessary checks": 1.0,
            "string": 2.0,
            "string manipulation": 1.0,
            "slicing for reversal": 1.0,
            "early return": 1.0,
            "primitive data types": 1.0
        },
        "algorithms-dynamic_programming": {
            "dynamic programming": 5.0,
            "iterative approach": 4.0,
            "array": 4.0,
            "bottom-up dynamic programming": 1.0,
            "tabulation": 1.0,
            "2D array": 1.0
        },
        "dynamic_programming-error_handling": {
            "dynamic programming": 5.0,
            "tabulation": 3.0,
            "2D list": 1.0,
            "iterative approach": 1.0,
            "array": 4.0,
            "state transition": 1.0,
            "iterative computation": 1.0
        },
        "recursion-searching": {
            "recursion": 5.0,
            "divide and conquer": 3.0,
            "integer": 1.0,
            "tail recursion": 2.0,
            "string": 3.0,
            "iteration": 1.0,
            "array": 5.5,
            "none": 2.0,
            "recursive binary search": 3.0,
            "binary search": 1.0,
            "divide and conquer using recursion": 1.0,
            "binary search approach": 1.0,
            "tail recursion could be optimized to iterative": 1.0
        },
        "searching-sorting": {
            "sort after transformation": 1.0,
            "list": 1.0,
            "linear search": 1.0,
            "early exit": 1.0,
            "array": 3.5,
            "direct access": 1.0,
            "leveraging sorted property": 1.0,
            "set data structure for uniqueness": 1.0,
            "use of set to automatically handle duplicates": 1.0,
            "set": 1.0,
            "simple concatenation and sorting": 2.0,
            "none": 1.0,
            "sorting": 1.0,
            "sorting in descending order": 1.0,
            "frequency counting and sorting": 1.0,
            "dictionary for frequency counting": 1.0,
            "dictionary": 1.5,
            "two-pointer technique": 1.0,
            "single pass": 1.0,
            "in-place computation": 1.0,
            "mathematical formula": 1.0,
            "use of arithmetic series formula": 1.0,
            "frequency counting": 2.0,
            "use of dictionary for frequency counting": 1.0,
            "hashing": 1.0,
            "early exit on duplicate detection": 1.0
        },
        "dynamic_programming-sorting": {
            "dynamic programming": 2.3333333333333335,
            "iterative approach": 1.3333333333333333,
            "space optimization by using variables instead of arrays": 1.0,
            "variables": 1.0,
            "bottom-up approach": 1.0,
            "array": 2.3333333333333335,
            "iterative filling of a DP table": 1.0,
            "2D array": 1.0,
            "tabulation": 1.0,
            "sorting and set usage": 1.5,
            "use of set for uniqueness": 1.0,
            "set": 2.0,
            "list": 2.0,
            "sorting": 2.0,
            "frequency counting and sorting": 1.0,
            "dictionary for frequency counting": 1.0,
            "dictionary": 1.0,
            "use of built-in sorting function": 1.0,
            "use of set to automatically handle duplicates": 1.0,
            "state transition": 1.0,
            "sorting to simplify unique count": 1.0,
            "sorting and selection": 1.0,
            "sorting and iteration": 1.0,
            "use of built-in sort function": 1.0
        },
        "functions-loops": {
            "iteration": 4.0,
            "case normalization": 1.0,
            "string": 2.0,
            "string manipulation": 1.0,
            "slicing": 1.0,
            "list": 3.0,
            "early return for empty list": 1.0
        },
        "algorithms-conditionals-loops": {
            "iteration with conditional checks": 1.0,
            "early condition checks for combined multiples": 1.0,
            "list": 3.0,
            "iteration and conditional checks": 2.0,
            "use of set for O(1) membership checking": 1.0,
            "dictionary": 2.0,
            "set": 1.0,
            "single pass through the list": 1.0,
            "two-pass approach": 1.0,
            "list slicing for reversal": 1.0,
            "iteration and conditional categorization": 1.0
        },
        "functions-loops-searching": {
            "backtracking": 1.0,
            "early termination": 1.0,
            "in-place modification for visited tracking": 1.0,
            "2D list": 2.0,
            "depth-first search (DFS)": 1.0,
            "in-place modification": 1.0,
            "iteration": 1.0,
            "use of set for O(1) average time complexity lookup": 1.0,
            "set": 1.0,
            "frequency counting": 1.0,
            "single pass frequency counting followed by a linear scan": 1.0,
            "dictionary": 1.0,
            "iterative summation": 1.0,
            "conditional checks to filter odd numbers": 1.0,
            "integer": 1.0
        },
        "dynamic_programming-loops": {
            "dynamic programming": 3.0,
            "bottom-up approach": 1.0,
            "array": 4.0,
            "iterative dynamic programming": 1.0,
            "iterative approach": 2.0,
            "Kadane's algorithm": 1.0,
            "iterative update": 1.0,
            "local and global maxima tracking": 1.0,
            "tabulation": 1.0,
            "2D array": 1.0,
            "space-efficient single array": 1.0
        },
        "data_structures-dynamic_programming": {
            "dynamic programming": 7.0,
            "bottom-up approach": 4.0,
            "array": 6.5,
            "tabulation": 1.0,
            "Kadane's Algorithm": 1.0,
            "iterative approach": 3.5,
            "state transition": 1.0,
            "state storage in dp array": 1.0,
            "space optimization": 1.0,
            "2D array": 2.0,
            "in-place updates": 1.0,
            "bottom-up calculation": 1.0,
            "sorting and selection": 1.0,
            "sorting to find potential candidates for maximum product": 1.0
        },
        "conditionals-error_handling-sorting": {
            "sorting and validation": 4.0,
            "early exit on finding a negative integer": 1.0,
            "list": 5.0,
            "sorting and conditional checking": 1.0,
            "early exit on condition failure": 1.0,
            "early termination on invalid price detection": 1.0,
            "tuple": 2.0,
            "early exit on invalid input": 1.0
        },
        "algorithms-data_structures-dynamic_programming": {
            "dynamic programming": 3.0,
            "bottom-up approach": 2.0,
            "array": 1.0,
            "2D array": 2.0,
            "dynamic programming and backtracking": 1.0,
            "memoization": 1.0,
            "early termination": 1.0,
            "dictionary (memo)": 1.0,
            "list (dp, res)": 1.0,
            "iterative filling of DP table": 1.0
        },
        "algorithms-data_structures": {
            "linear search": 1.0,
            "single pass iteration": 1.0,
            "array": 2.0,
            "set data structure utilization": 1.0,
            "use of set to automatically handle duplicates": 1.0,
            "set": 1.0,
            "iterative summation": 1.0,
            "array manipulation": 1.0,
            "slicing": 1.0,
            "list": 1.0,
            "conditional logic": 1.0
        },
        "data_structures-recursion": {
            "recursion": 5.0,
            "divide and conquer": 2.0,
            "integer": 3.0,
            "base case optimization": 1.0,
            "string": 2.0,
            "tail recursion": 1.0
        },
        "data_structures-sorting": {
            "two-pointer technique": 2.0,
            "iterative merging": 1.0,
            "list": 2.0,
            "hashing with sorted keys": 1.0,
            "use of sorted string as hash key": 1.0,
            "dictionary": 1.0,
            "in-place modification": 1.0,
            "array": 1.0,
            "linear search": 1.0,
            "early return for empty list": 1.0,
            "set data structure for uniqueness": 1.0,
            "leveraging set for automatic deduplication": 1.0,
            "set": 1.0
        },
        "data_structures-searching": {
            "binary search": 2.0,
            "early exit upon finding target": 1.0,
            "search narrowing using binary search": 1.0,
            "array": 5.0,
            "linear search": 4.0,
            "divide and conquer": 1.0,
            "pointer manipulation": 1.0,
            "single pass traversal": 1.0,
            "list": 5.0,
            "early exit on match": 1.0
        },
        "algorithms-sorting": {
            "two-pass partitioning": 1.0,
            "separation of concerns": 1.0,
            "two-pass approach": 1.0,
            "list": 5.0,
            "custom sorting": 2.0,
            "stable sort using tuple keys": 1.0,
            "stable sort": 1.0,
            "sorting": 1.0,
            "stable sorting": 1.0,
            "tuple": 1.0,
            "built-in sorting": 1.0,
            "leveraging Python's Timsort": 1.0
        },
        "algorithms-searching": {
            "binary search": 3.0,
            "two-pointer technique": 1.0,
            "array": 5.0,
            "divide and conquer": 1.0,
            "binary search for rotated array": 1.0,
            "linear search": 2.0
        },
        "error_handling-searching": {
            "built-in function usage": 1.0,
            "leveraging built-in string methods": 1.0,
            "string": 3.0,
            "substring search": 1.0,
            "case normalization": 1.0,
            "linear search": 1.0,
            "early return for empty list": 1.0,
            "list": 2.0,
            "linear search using built-in function": 1.0,
            "use of built-in function for efficiency": 1.0,
            "string reversal and comparison": 1.0,
            "slicing for reversal": 1.0
        },
        "recursion-sorting": {
            "two-pointer technique": 1.0,
            "sorting after squaring": 1.0,
            "list": 4.0,
            "recursive sorting": 1.0,
            "divide and conquer": 2.0,
            "recursive merging": 1.0,
            "recursive selection sort": 1.0,
            "recursive approach": 1.0,
            "iterative linear search": 1.0,
            "array": 1.0
        },
        "conditionals-loops-searching": {
            "brute force iteration": 1.0,
            "integer": 1.0,
            "linear search": 1.0,
            "single pass": 1.0,
            "array": 2.0,
            "iteration and conditional check": 1.0,
            "early return if array is empty": 1.0,
            "iteration with conditional checks": 1.0,
            "case-insensitive comparison using lowercase conversion": 1.0,
            "string": 2.0,
            "iteration": 1.0
        },
        "algorithms-data_structures-loops": {
            "hash set for O(1) lookups": 1.0,
            "early termination for non-sequence starts": 1.0,
            "set": 4.0,
            "sorting and greedy": 1.0,
            "sorting to simplify merging": 1.0,
            "single pass merge": 1.0,
            "list": 5.0,
            "sliding window with deque": 1.0,
            "deque for efficient max tracking": 1.0,
            "deque": 2.0,
            "topological sort": 1.0,
            "Kahn's algorithm for topological sorting": 1.0,
            "graph (adjacency list)": 1.0,
            "queue": 1.0,
            "breadth-first search (BFS)": 1.0,
            "early stopping when endWord is found": 1.0,
            "iteration": 1.0,
            "case normalization": 1.0,
            "string": 2.0,
            "slicing": 1.0,
            "use of Python slicing for simplicity and efficiency": 1.0,
            "linear search": 1.0,
            "iterative accumulation": 1.0,
            "use of built-in function": 1.0,
            "iteration with set for uniqueness": 1.0,
            "set for O(1) average time complexity lookups": 1.0,
            "iterative boundary traversal": 1.0,
            "boundary checks to avoid revisiting elements": 1.0,
            "set-based iteration": 1.0,
            "set for O(1) lookups": 1.0,
            "hash map for two-sum complement": 1.0,
            "hash map usage to reduce complexity from O(n^4)": 1.0,
            "hash map": 1.0,
            "sliding window": 1.0,
            "two-pointer technique": 1.0,
            "dictionary": 1.0
        },
        "data_structures-functions-searching": {
            "linear search": 4.0,
            "list": 5.0,
            "early return for empty list": 1.0,
            "iterative summation": 1.0,
            "early return for empty input": 1.0
        },
        "data_structures-functions": {
            "simulation": 1.0,
            "list": 2.0,
            "iterative processing": 1.0,
            "none": 1.0,
            "linked list operations": 1.0,
            "iterative traversal for add operation": 1.0,
            "linked list": 1.0,
            "dictionary operations": 1.0,
            "direct dictionary access": 1.0,
            "dictionary": 1.0,
            "set operations": 1.0,
            "use of set for O(1) average time complexity operations": 1.0,
            "set": 1.0
        },
        "dynamic_programming-functions": {
            "iterative approach": 3.0,
            "iterative calculation to reduce space usage": 1.0,
            "variables": 2.0,
            "dynamic programming": 3.0,
            "array": 2.0,
            "Kadane's algorithm": 1.0,
            "iterative update of current and maximum sums": 1.0,
            "bottom-up approach": 1.0,
            "2D array": 1.0
        },
        "dynamic_programming-searching": {
            "mathematical calculation": 1.0,
            "direct computation using absolute difference": 1.0,
            "combinatorial mathematics": 1.0,
            "use of mathematical formula for combinations": 1.0,
            "dynamic programming": 3.0,
            "iterative approach": 3.0,
            "array": 3.0,
            "state transition": 1.0
        },
        "functions-searching-sorting": {
            "binary search": 1.0,
            "partitioning": 2.0,
            "conditional checks": 1.0,
            "array": 2.0,
            "quickselect": 1.0,
            "in-place swaps": 1.0,
            "sliding window": 1.0,
            "character frequency counting": 1.0,
            "Counter": 1.0,
            "greedy algorithm": 1.0,
            "priority queue (min-heap) for efficient end time management": 1.0,
            "priority queue (min-heap)": 1.0,
            "sorting and binary search": 1.0,
            "binary search via bisect module": 1.0,
            "list": 1.0
        },
        "conditionals-functions-searching-sorting": {
            "sorting": 4.0,
            "set for uniqueness": 1.0,
            "set": 1.0,
            "list": 6.0,
            "hashing": 2.0,
            "sorting for key generation": 2.0,
            "dictionary": 4.0,
            "binary search": 1.0,
            "binary search on smaller array": 1.0,
            "array": 2.0,
            "heap-based approach": 1.0,
            "min-heap to maintain order of elements": 1.0,
            "min-heap": 2.0,
            "brute force with sorting": 1.0,
            "sorting by computed key": 1.0,
            "sorting to simplify maximum product calculation": 1.0,
            "frequency counting and sorting": 1.0,
            "sorting by frequency and index": 1.0,
            "sorting and iterative merging": 1.0,
            "sorting by start time": 1.0,
            "iterative merge": 1.0,
            "sorting and linear search": 1.0,
            "tuple unpacking for sorting": 1.0,
            "tuple": 1.0,
            "frequency counting and heap manipulation": 1.0,
            "heap for efficient frequency extraction": 1.0,
            "Counter": 1.0,
            "heap-based selection": 1.0,
            "use of heap for efficient k-selection": 1.0,
            "heap": 1.0,
            "greedy scheduling": 1.0,
            "conditional checks": 1.0
        },
        "algorithms-loops-sorting": {
            "sorting and median calculation": 1.0,
            "in-place sorting": 1.0,
            "list": 1.0,
            "sorting": 1.0,
            "built-in sort function": 1.0,
            "array": 1.0
        },
        "error_handling-loops-recursion": {
            "recursion": 4.0,
            "none": 2.0,
            "list": 2.0,
            "base case optimization": 1.0,
            "integer": 1.0,
            "dynamic programming": 1.0,
            "iterative approach": 1.0,
            "array storage for memoization": 1.0,
            "string": 2.0,
            "tail recursion": 1.0
        },
        "data_structures-error_handling-loops-recursion": {
            "recursion": 5.0,
            "tail recursion": 2.0,
            "list": 5.0,
            "recursive decomposition": 1.0,
            "recursive traversal": 2.0,
            "filtering non-integers": 1.0
        }
    },
    "patterns_by_difficulty": {
        "very easy": {
            "iteration and condition checking": 1.0,
            "early return for empty list": 3.0,
            "list": 25.0,
            "iteration": 2.5,
            "list slicing": 1.0,
            "built-in slicing for reverse": 1.0,
            "recursion": 11.0,
            "tail recursion": 3.0,
            "none": 5.333333333333333,
            "divide and conquer": 3.6666666666666665,
            "string": 6.0,
            "base case to prevent infinite recursion": 1.0,
            "iterative approach": 7.333333333333333,
            "simple conditional checks": 1.0,
            "conditional check": 1.0,
            "direct conditional evaluation": 1.0,
            "conditional logic": 2.5,
            "none needed due to simplicity": 1.0,
            "conditional checks": 4.0,
            "conditional statements": 3.0,
            "sorting and filtering": 2.0,
            "list comprehension for filtering": 1.5,
            "list comprehension": 1.0,
            "use of built-in functions for efficiency": 1.0,
            "sorting": 2.0,
            "use of built-in sorting function": 1.0,
            "dynamic programming": 11.0,
            "bottom-up approach": 1.5,
            "array": 19.0,
            "iterative processing": 2.0,
            "sequential processing": 1.0,
            "linked list manipulation": 1.0,
            "singly linked list": 1.0,
            "early return for error handling": 1.0,
            "integer": 2.3333333333333335,
            "conditional checking": 1.0,
            "primitive types": 1.0,
            "early returns to avoid unnecessary checks": 1.0,
            "string manipulation": 1.0,
            "slicing for reversal": 1.0,
            "early return": 1.0,
            "primitive data types": 1.0,
            "bottom-up dynamic programming": 1.0,
            "tabulation": 3.0,
            "2D array": 1.5,
            "2D list": 1.0,
            "state transition": 1.3333333333333333,
            "iterative computation": 1.5,
            "sort after transformation": 1.0,
            "linear search": 6.666666666666667,
            "early exit": 1.0,
            "direct access": 1.0,
            "leveraging sorted property": 1.0,
            "set data structure for uniqueness": 1.0,
            "use of set to automatically handle duplicates": 1.0,
            "set": 3.3333333333333335,
            "simple concatenation and sorting": 1.0,
            "space optimization by using variables instead of arrays": 1.0,
            "variables": 1.5,
            "iterative filling of a DP table": 1.0,
            "iteration with error handling": 1.0,
            "early skipping of non-integer elements": 1.0,
            "iteration and filtering": 1.0,
            "early skipping of non-integers": 1.0,
            "filtering with type checking": 1.0,
            "early exit on type mismatch": 1.0,
            "iteration with type checking": 1.0,
            "early exit on non-integer types": 1.0,
            "iteration and type checking": 1.0,
            "early filtering of non-string elements": 1.0,
            "list comprehension for concise filtering": 1.0,
            "filtering and sorting": 1.0,
            "categorization and sorting": 1.5,
            "single pass categorization after sorting": 1.0,
            "dictionary": 7.0,
            "classification and sorting": 1.0,
            "sorting before classification": 1.0,
            "sorting before categorization": 1.0,
            "filter and sum": 1.0,
            "sorting to facilitate greedy selection": 1.0,
            "recursive with memoization": 1.0,
            "memoization": 1.0,
            "iteration and conditional filtering": 1.0,
            "early filtering of non-relevant elements": 1.0,
            "single pass iteration": 1.0,
            "set data structure utilization": 1.0,
            "iterative summation": 2.0,
            "array manipulation": 1.0,
            "slicing": 2.0,
            "base case optimization": 1.0,
            "two-pointer technique": 5.0,
            "iterative merging": 1.0,
            "hashing with sorted keys": 1.0,
            "use of sorted string as hash key": 1.0,
            "in-place modification": 1.0,
            "leveraging set for automatic deduplication": 1.0,
            "binary search": 5.0,
            "early exit upon finding target": 1.0,
            "search narrowing using binary search": 1.0,
            "pointer manipulation": 1.0,
            "single pass traversal": 1.0,
            "two-pass partitioning": 1.0,
            "separation of concerns": 1.0,
            "two-pass approach": 1.0,
            "custom sorting": 2.0,
            "stable sort using tuple keys": 1.0,
            "stable sort": 1.0,
            "stable sorting": 1.0,
            "tuple": 1.0,
            "built-in sorting": 1.0,
            "leveraging Python's Timsort": 1.0,
            "binary search for rotated array": 1.0,
            "built-in function usage": 1.0,
            "leveraging built-in string methods": 1.0,
            "substring search": 1.0,
            "case normalization": 2.0,
            "linear search using built-in function": 1.0,
            "use of built-in function for efficiency": 1.0,
            "string reversal and comparison": 1.0,
            "sorting after squaring": 1.0,
            "recursive sorting": 1.0,
            "recursive merging": 1.0,
            "recursive selection sort": 1.0,
            "recursive approach": 1.0,
            "iterative linear search": 1.0,
            "single pass": 2.0,
            "in-place computation": 1.0,
            "mathematical formula": 1.0,
            "use of arithmetic series formula": 1.0,
            "frequency counting": 2.0,
            "use of dictionary for frequency counting": 1.0,
            "dictionary for frequency counting": 2.0,
            "hashing": 1.0,
            "early exit on duplicate detection": 1.0,
            "sorting and set usage": 1.5,
            "use of set for uniqueness": 1.0,
            "frequency counting and sorting": 1.0,
            "brute force iteration": 1.0,
            "iteration and conditional check": 1.0,
            "early return if array is empty": 1.0,
            "iteration with conditional checks": 1.0,
            "case-insensitive comparison using lowercase conversion": 1.0,
            "use of Python slicing for simplicity and efficiency": 1.0,
            "iterative accumulation": 1.0,
            "use of built-in function": 1.0,
            "iteration with set for uniqueness": 1.0,
            "set for O(1) average time complexity lookups": 1.0,
            "early return for empty input": 1.0,
            "built-in sort function": 1.0,
            "sorting and grouping": 1.0,
            "sorting before grouping to ensure order within groups": 1.0,
            "sorting and conditional classification": 1.0,
            "sorting with custom key": 1.0,
            "None": 1.0,
            "simulation": 1.0,
            "linked list operations": 2.0,
            "iterative traversal for add operation": 1.0,
            "linked list": 2.0,
            "dictionary operations": 1.0,
            "direct dictionary access": 1.0,
            "set operations": 1.0,
            "use of set for O(1) average time complexity operations": 1.0,
            "iterative calculation to reduce space usage": 1.0,
            "Kadane's algorithm": 1.0,
            "iterative update of current and maximum sums": 1.0,
            "early exit for empty stack": 1.0,
            "linear data structure manipulation": 1.0,
            "hash table implementation": 1.0,
            "simple iterative processing": 1.0,
            "early exit on match": 1.0,
            "in-place updates": 1.0,
            "bottom-up calculation": 1.0,
            "sorting and selection": 2.0,
            "sorting to find potential candidates for maximum product": 1.0,
            "sorting to simplify unique count": 1.0,
            "sorting and iteration": 1.0,
            "use of built-in sort function": 1.0,
            "mathematical calculation": 1.0,
            "direct computation using absolute difference": 1.0,
            "combinatorial mathematics": 1.0,
            "use of mathematical formula for combinations": 1.0,
            "array storage for memoization": 1.0,
            "recursive decomposition": 1.0,
            "recursive traversal": 2.0,
            "filtering non-integers": 1.0
        },
        "easy": {
            "iteration": 5.0,
            "case normalization": 1.0,
            "string": 2.0,
            "string manipulation": 1.0,
            "slicing": 1.0,
            "list": 13.0,
            "early return for empty list": 1.0,
            "iteration with conditional checks": 1.0,
            "early condition checks for combined multiples": 1.0,
            "iteration and conditional checks": 2.0,
            "use of set for O(1) membership checking": 1.0,
            "dictionary": 4.0,
            "set": 2.0,
            "single pass through the list": 1.0,
            "two-pass approach": 1.0,
            "list slicing for reversal": 1.0,
            "iteration and conditional categorization": 1.0,
            "backtracking": 1.0,
            "early termination": 1.0,
            "in-place modification for visited tracking": 1.0,
            "2D list": 2.0,
            "depth-first search (DFS)": 1.0,
            "in-place modification": 1.0,
            "use of set for O(1) average time complexity lookup": 1.0,
            "frequency counting": 1.0,
            "single pass frequency counting followed by a linear scan": 1.0,
            "iterative summation": 1.0,
            "conditional checks to filter odd numbers": 1.0,
            "integer": 1.0,
            "dynamic programming": 6.0,
            "bottom-up approach": 2.0,
            "array": 6.333333333333333,
            "iterative dynamic programming": 1.0,
            "iterative approach": 2.5,
            "Kadane's algorithm": 1.0,
            "iterative update": 1.0,
            "local and global maxima tracking": 1.0,
            "tabulation": 2.0,
            "2D array": 1.0,
            "space-efficient single array": 1.0,
            "Kadane's Algorithm": 1.0,
            "state transition": 1.0,
            "simulation of stack operations": 1.0,
            "simulation of queue operations": 1.0,
            "sorting": 1.0,
            "sorting in descending order": 1.0,
            "simple concatenation and sorting": 1.0,
            "frequency counting and sorting": 1.0,
            "dictionary for frequency counting": 1.0,
            "sorting and validation": 4.0,
            "early exit on finding a negative integer": 1.0,
            "sorting and conditional checking": 1.0,
            "early exit on condition failure": 1.0,
            "early termination on invalid price detection": 1.0,
            "tuple": 2.0,
            "early exit on invalid input": 1.0,
            "in-place updates": 1.0,
            "iterative table filling": 1.0,
            "recursive binary search": 3.0,
            "divide and conquer": 3.0,
            "binary search": 1.0,
            "divide and conquer using recursion": 1.0,
            "binary search approach": 1.0,
            "recursion": 1.0,
            "tail recursion could be optimized to iterative": 1.0
        },
        "hard": {
            "string parsing and frequency counting": 1.0,
            "regular expressions for parsing": 1.0,
            "dictionary": 2.5,
            "command parsing and execution": 1.0,
            "early error detection": 1.0,
            "iterative parsing": 1.0,
            "early termination": 1.0,
            "skip whitespace": 1.0,
            "string": 1.0,
            "hash set for O(1) lookups": 1.0,
            "early termination for non-sequence starts": 1.0,
            "set": 1.5,
            "sorting and greedy": 1.0,
            "sorting to simplify merging": 1.0,
            "single pass merge": 1.0,
            "list": 3.5,
            "sliding window with deque": 1.0,
            "deque for efficient max tracking": 1.0,
            "deque": 2.0,
            "topological sort": 1.0,
            "Kahn's algorithm for topological sorting": 1.0,
            "graph (adjacency list)": 1.0,
            "queue": 1.0,
            "breadth-first search (BFS)": 1.0,
            "early stopping when endWord is found": 1.0,
            "binary search": 2.0,
            "partitioning": 2.0,
            "conditional checks": 1.0,
            "array": 4.0,
            "quickselect": 1.0,
            "in-place swaps": 1.0,
            "sliding window": 1.0,
            "character frequency counting": 1.0,
            "Counter": 1.0,
            "greedy algorithm": 1.0,
            "priority queue (min-heap) for efficient end time management": 1.0,
            "priority queue (min-heap)": 1.0,
            "sorting and binary search": 1.0,
            "binary search via bisect module": 1.0,
            "sorting": 3.0,
            "set for uniqueness": 1.0,
            "hashing": 2.0,
            "sorting for key generation": 2.0,
            "binary search on smaller array": 1.0,
            "heap-based approach": 1.0,
            "min-heap to maintain order of elements": 1.0,
            "min-heap": 1.0,
            "brute force with sorting": 1.0,
            "sorting by computed key": 1.0,
            "sorting to simplify maximum product calculation": 1.0,
            "frequency counting and sorting": 1.0,
            "sorting by frequency and index": 1.0,
            "sorting and iterative merging": 1.0,
            "sorting by start time": 1.0,
            "iterative merge": 1.0
        },
        "medium": {
            "dynamic programming": 6.5,
            "iterative approach": 3.0,
            "state storage in dp array": 1.0,
            "array": 2.6666666666666665,
            "space optimization": 1.0,
            "bottom-up approach": 4.0,
            "2D array": 3.0,
            "dynamic programming and backtracking": 1.0,
            "memoization": 1.0,
            "early termination": 1.0,
            "dictionary (memo)": 1.0,
            "list (dp, res)": 1.0,
            "iterative filling of DP table": 1.0,
            "precomputation of palindrome substrings": 1.0,
            "sorting and median calculation": 1.0,
            "in-place sorting": 1.0,
            "list": 1.0,
            "sorting": 1.0,
            "built-in sort function": 1.0
        },
        "very hard": {
            "iterative boundary traversal": 1.0,
            "boundary checks to avoid revisiting elements": 1.0,
            "list": 1.0,
            "set-based iteration": 1.0,
            "set for O(1) lookups": 1.0,
            "set": 1.0,
            "hash map for two-sum complement": 1.0,
            "hash map usage to reduce complexity from O(n^4)": 1.0,
            "hash map": 1.0,
            "sliding window": 1.0,
            "two-pointer technique": 1.0,
            "dictionary": 1.0,
            "sorting and linear search": 1.0,
            "tuple unpacking for sorting": 1.0,
            "tuple": 1.0,
            "frequency counting and heap manipulation": 1.0,
            "heap for efficient frequency extraction": 1.0,
            "Counter": 1.0,
            "min-heap": 1.0,
            "heap-based selection": 1.0,
            "use of heap for efficient k-selection": 1.0,
            "heap": 1.0,
            "greedy scheduling": 1.0,
            "sorting": 1.0,
            "conditional checks": 1.0
        }
    },
    "total_patterns": {
        "iteration and condition checking": 1.0,
        "early return for empty list": 3.5,
        "list": 32.666666666666664,
        "iteration": 5.0,
        "list slicing": 1.0,
        "built-in slicing for reverse": 1.0,
        "recursion": 11.333333333333334,
        "tail recursion": 3.0,
        "none": 5.333333333333333,
        "divide and conquer": 4.666666666666667,
        "string": 7.0,
        "base case to prevent infinite recursion": 1.0,
        "iterative approach": 10.0,
        "simple conditional checks": 1.0,
        "conditional check": 1.0,
        "direct conditional evaluation": 1.0,
        "conditional logic": 2.5,
        "none needed due to simplicity": 1.0,
        "conditional checks": 3.0,
        "conditional statements": 3.0,
        "sorting and filtering": 2.0,
        "list comprehension for filtering": 1.5,
        "list comprehension": 1.0,
        "use of built-in functions for efficiency": 1.0,
        "sorting": 3.3333333333333335,
        "use of built-in sorting function": 1.0,
        "dynamic programming": 19.333333333333332,
        "bottom-up approach": 5.0,
        "array": 29.333333333333332,
        "iterative processing": 2.0,
        "sequential processing": 1.0,
        "linked list manipulation": 1.0,
        "singly linked list": 1.0,
        "early return for error handling": 1.0,
        "integer": 2.6666666666666665,
        "conditional checking": 1.0,
        "primitive types": 1.0,
        "early returns to avoid unnecessary checks": 1.0,
        "string manipulation": 2.0,
        "slicing for reversal": 1.0,
        "early return": 1.0,
        "primitive data types": 1.0,
        "bottom-up dynamic programming": 1.0,
        "tabulation": 4.0,
        "2D array": 3.6666666666666665,
        "2D list": 3.0,
        "state transition": 1.6666666666666667,
        "iterative computation": 1.5,
        "sort after transformation": 1.0,
        "linear search": 6.666666666666667,
        "early exit": 1.0,
        "direct access": 1.0,
        "leveraging sorted property": 1.0,
        "set data structure for uniqueness": 1.0,
        "use of set to automatically handle duplicates": 1.0,
        "set": 5.333333333333333,
        "simple concatenation and sorting": 2.0,
        "space optimization by using variables instead of arrays": 1.0,
        "variables": 1.5,
        "iterative filling of a DP table": 1.0,
        "case normalization": 1.5,
        "slicing": 1.5,
        "iteration with conditional checks": 1.0,
        "early condition checks for combined multiples": 1.0,
        "iteration and conditional checks": 2.0,
        "use of set for O(1) membership checking": 1.0,
        "dictionary": 8.333333333333334,
        "single pass through the list": 1.0,
        "two-pass approach": 1.0,
        "list slicing for reversal": 1.0,
        "iteration and conditional categorization": 1.0,
        "backtracking": 1.0,
        "early termination": 3.0,
        "in-place modification for visited tracking": 1.0,
        "depth-first search (DFS)": 1.0,
        "in-place modification": 1.0,
        "use of set for O(1) average time complexity lookup": 1.0,
        "frequency counting": 1.5,
        "single pass frequency counting followed by a linear scan": 1.0,
        "iterative summation": 1.5,
        "conditional checks to filter odd numbers": 1.0,
        "iterative dynamic programming": 1.0,
        "Kadane's algorithm": 1.0,
        "iterative update": 1.0,
        "local and global maxima tracking": 1.0,
        "space-efficient single array": 1.0,
        "Kadane's Algorithm": 1.0,
        "simulation of stack operations": 1.0,
        "simulation of queue operations": 1.0,
        "string parsing and frequency counting": 1.0,
        "regular expressions for parsing": 1.0,
        "command parsing and execution": 1.0,
        "early error detection": 1.0,
        "iterative parsing": 1.0,
        "skip whitespace": 1.0,
        "state storage in dp array": 1.0,
        "space optimization": 1.0,
        "sorting in descending order": 1.0,
        "frequency counting and sorting": 1.0,
        "dictionary for frequency counting": 1.5,
        "sorting and validation": 4.0,
        "early exit on finding a negative integer": 1.0,
        "sorting and conditional checking": 1.0,
        "early exit on condition failure": 1.0,
        "early termination on invalid price detection": 1.0,
        "tuple": 1.3333333333333333,
        "early exit on invalid input": 1.0,
        "dynamic programming and backtracking": 1.0,
        "memoization": 1.0,
        "dictionary (memo)": 1.0,
        "list (dp, res)": 1.0,
        "iterative filling of DP table": 1.0,
        "iteration with error handling": 1.0,
        "early skipping of non-integer elements": 1.0,
        "iteration and filtering": 1.0,
        "early skipping of non-integers": 1.0,
        "filtering with type checking": 1.0,
        "early exit on type mismatch": 1.0,
        "iteration with type checking": 1.0,
        "early exit on non-integer types": 1.0,
        "iteration and type checking": 1.0,
        "early filtering of non-string elements": 1.0,
        "list comprehension for concise filtering": 1.0,
        "filtering and sorting": 1.0,
        "categorization and sorting": 1.5,
        "single pass categorization after sorting": 1.0,
        "classification and sorting": 1.0,
        "sorting before classification": 1.0,
        "sorting before categorization": 1.0,
        "filter and sum": 1.0,
        "sorting to facilitate greedy selection": 1.0,
        "recursive with memoization": 1.0,
        "iteration and conditional filtering": 1.0,
        "early filtering of non-relevant elements": 1.0,
        "single pass iteration": 1.0,
        "set data structure utilization": 1.0,
        "array manipulation": 1.0,
        "base case optimization": 1.0,
        "two-pointer technique": 6.0,
        "iterative merging": 1.0,
        "hashing with sorted keys": 1.0,
        "use of sorted string as hash key": 1.0,
        "leveraging set for automatic deduplication": 1.0,
        "binary search": 4.0,
        "early exit upon finding target": 1.0,
        "search narrowing using binary search": 1.0,
        "pointer manipulation": 1.0,
        "single pass traversal": 1.0,
        "two-pass partitioning": 1.0,
        "separation of concerns": 1.0,
        "custom sorting": 2.0,
        "stable sort using tuple keys": 1.0,
        "stable sort": 1.0,
        "stable sorting": 1.0,
        "built-in sorting": 1.0,
        "leveraging Python's Timsort": 1.0,
        "binary search for rotated array": 1.0,
        "built-in function usage": 1.0,
        "leveraging built-in string methods": 1.0,
        "substring search": 1.0,
        "linear search using built-in function": 1.0,
        "use of built-in function for efficiency": 1.0,
        "string reversal and comparison": 1.0,
        "sorting after squaring": 1.0,
        "recursive sorting": 1.0,
        "recursive merging": 1.0,
        "recursive selection sort": 1.0,
        "recursive approach": 1.0,
        "iterative linear search": 1.0,
        "single pass": 2.0,
        "in-place computation": 1.0,
        "mathematical formula": 1.0,
        "use of arithmetic series formula": 1.0,
        "use of dictionary for frequency counting": 1.0,
        "hashing": 1.5,
        "early exit on duplicate detection": 1.0,
        "sorting and set usage": 1.5,
        "use of set for uniqueness": 1.0,
        "brute force iteration": 1.0,
        "iteration and conditional check": 1.0,
        "early return if array is empty": 1.0,
        "case-insensitive comparison using lowercase conversion": 1.0,
        "hash set for O(1) lookups": 1.0,
        "early termination for non-sequence starts": 1.0,
        "sorting and greedy": 1.0,
        "sorting to simplify merging": 1.0,
        "single pass merge": 1.0,
        "sliding window with deque": 1.0,
        "deque for efficient max tracking": 1.0,
        "deque": 2.0,
        "topological sort": 1.0,
        "Kahn's algorithm for topological sorting": 1.0,
        "graph (adjacency list)": 1.0,
        "queue": 1.0,
        "breadth-first search (BFS)": 1.0,
        "early stopping when endWord is found": 1.0,
        "use of Python slicing for simplicity and efficiency": 1.0,
        "iterative accumulation": 1.0,
        "use of built-in function": 1.0,
        "iteration with set for uniqueness": 1.0,
        "set for O(1) average time complexity lookups": 1.0,
        "in-place updates": 1.0,
        "iterative table filling": 1.0,
        "early return for empty input": 1.0,
        "iterative boundary traversal": 1.0,
        "boundary checks to avoid revisiting elements": 1.0,
        "set-based iteration": 1.0,
        "set for O(1) lookups": 1.0,
        "hash map for two-sum complement": 1.0,
        "hash map usage to reduce complexity from O(n^4)": 1.0,
        "hash map": 1.0,
        "sliding window": 1.0,
        "precomputation of palindrome substrings": 1.0,
        "built-in sort function": 2.0,
        "sorting and grouping": 1.0,
        "sorting before grouping to ensure order within groups": 1.0,
        "sorting and conditional classification": 1.0,
        "sorting with custom key": 1.0,
        "None": 1.0,
        "simulation": 1.0,
        "linked list operations": 2.0,
        "iterative traversal for add operation": 1.0,
        "linked list": 2.0,
        "dictionary operations": 1.0,
        "direct dictionary access": 1.0,
        "set operations": 1.0,
        "use of set for O(1) average time complexity operations": 1.0,
        "iterative calculation to reduce space usage": 1.0,
        "iterative update of current and maximum sums": 1.0,
        "early exit for empty stack": 1.0,
        "linear data structure manipulation": 1.0,
        "hash table implementation": 1.0,
        "simple iterative processing": 1.0,
        "early exit on match": 1.0,
        "bottom-up calculation": 1.0,
        "sorting and selection": 2.0,
        "sorting to find potential candidates for maximum product": 1.0,
        "sorting to simplify unique count": 1.0,
        "sorting and iteration": 1.0,
        "use of built-in sort function": 1.0,
        "mathematical calculation": 1.0,
        "direct computation using absolute difference": 1.0,
        "combinatorial mathematics": 1.0,
        "use of mathematical formula for combinations": 1.0,
        "partitioning": 2.0,
        "quickselect": 1.0,
        "in-place swaps": 1.0,
        "character frequency counting": 1.0,
        "Counter": 2.0,
        "greedy algorithm": 1.0,
        "priority queue (min-heap) for efficient end time management": 1.0,
        "priority queue (min-heap)": 1.0,
        "sorting and binary search": 1.0,
        "binary search via bisect module": 1.0,
        "set for uniqueness": 1.0,
        "sorting for key generation": 2.0,
        "binary search on smaller array": 1.0,
        "heap-based approach": 1.0,
        "min-heap to maintain order of elements": 1.0,
        "min-heap": 2.0,
        "brute force with sorting": 1.0,
        "sorting by computed key": 1.0,
        "sorting to simplify maximum product calculation": 1.0,
        "sorting by frequency and index": 1.0,
        "sorting and iterative merging": 1.0,
        "sorting by start time": 1.0,
        "iterative merge": 1.0,
        "sorting and median calculation": 1.0,
        "in-place sorting": 1.0,
        "sorting and linear search": 1.0,
        "tuple unpacking for sorting": 1.0,
        "frequency counting and heap manipulation": 1.0,
        "heap for efficient frequency extraction": 1.0,
        "heap-based selection": 1.0,
        "use of heap for efficient k-selection": 1.0,
        "heap": 1.0,
        "greedy scheduling": 1.0,
        "recursive binary search": 3.0,
        "divide and conquer using recursion": 1.0,
        "binary search approach": 1.0,
        "tail recursion could be optimized to iterative": 1.0,
        "array storage for memoization": 1.0,
        "recursive decomposition": 1.0,
        "recursive traversal": 2.0,
        "filtering non-integers": 1.0
    },
    "comparative_analysis": {
        "error_handling-loops-very easy": {
            "success_rate": 0.4,
            "avg_attempts": 3.0,
            "patterns": {
                "iteration and condition checking": 1.0,
                "early return for empty list": 3.0,
                "list": 4.5,
                "iteration": 2.0,
                "list slicing": 1.0,
                "built-in slicing for reverse": 1.0,
                "iteration with error handling": 1.0,
                "early skipping of non-integer elements": 1.0,
                "iteration and filtering": 1.0,
                "early skipping of non-integers": 1.0,
                "filtering with type checking": 1.0,
                "early exit on type mismatch": 1.0,
                "iteration with type checking": 1.0,
                "early exit on non-integer types": 1.0,
                "iteration and type checking": 1.0,
                "early filtering of non-string elements": 1.0
            },
            "pattern_distribution": {
                "algorithmic_patterns": 0.0,
                "data_structure_patterns": 0.0,
                "optimization_patterns": 0.0,
                "implementation_patterns": 0.0
            }
        },
        "loops-recursion-very easy": {
            "success_rate": 0.5,
            "avg_attempts": 3.0,
            "patterns": {
                "recursion": 5.0,
                "tail recursion": 1.0,
                "none": 3.0,
                "divide and conquer": 1.0,
                "string": 1.0,
                "base case to prevent infinite recursion": 1.0
            },
            "pattern_distribution": {
                "algorithmic_patterns": 0.0,
                "data_structure_patterns": 0.0,
                "optimization_patterns": 0.0,
                "implementation_patterns": 0.0
            }
        },
        "conditionals-data_structures-very easy": {
            "success_rate": 0.6,
            "avg_attempts": 3.0,
            "patterns": {
                "iterative approach": 1.0,
                "simple conditional checks": 1.0,
                "list": 2.0,
                "conditional check": 1.0,
                "direct conditional evaluation": 1.0,
                "conditional logic": 1.0,
                "none needed due to simplicity": 1.0,
                "none": 1.0,
                "conditional checks": 1.0,
                "conditional statements": 1.0
            },
            "pattern_distribution": {
                "algorithmic_patterns": 0.0,
                "data_structure_patterns": 0.0,
                "optimization_patterns": 0.0,
                "implementation_patterns": 0.0
            }
        },
        "algorithms-conditionals-very easy": {
            "success_rate": 0.0,
            "avg_attempts": 3.0,
            "patterns": {
                "conditional logic": 3.0,
                "conditional statements": 2.0
            },
            "pattern_distribution": {
                "algorithmic_patterns": 0.0,
                "data_structure_patterns": 0.0,
                "optimization_patterns": 0.0,
                "implementation_patterns": 0.0
            }
        },
        "conditionals-sorting-very easy": {
            "success_rate": 0.26666666666666666,
            "avg_attempts": 3.0,
            "patterns": {
                "sorting and filtering": 2.0,
                "list comprehension for filtering": 1.5,
                "list": 5.0,
                "list comprehension": 1.0,
                "use of built-in functions for efficiency": 1.0,
                "sorting": 1.0,
                "use of built-in sorting function": 1.0,
                "list comprehension for concise filtering": 1.0,
                "filtering and sorting": 1.0,
                "categorization and sorting": 1.5,
                "single pass categorization after sorting": 1.0,
                "dictionary": 3.5,
                "classification and sorting": 1.0,
                "sorting before classification": 1.0,
                "sorting before categorization": 1.0,
                "built-in sort function": 1.0,
                "sorting and grouping": 1.0,
                "sorting before grouping to ensure order within groups": 1.0,
                "sorting and conditional classification": 1.0,
                "sorting with custom key": 1.0,
                "None": 1.0
            },
            "pattern_distribution": {
                "algorithmic_patterns": 0.0,
                "data_structure_patterns": 0.0,
                "optimization_patterns": 0.0,
                "implementation_patterns": 0.0
            }
        },
        "conditionals-dynamic_programming-very easy": {
            "success_rate": 0.0,
            "avg_attempts": 3.0,
            "patterns": {
                "dynamic programming": 2.5,
                "bottom-up approach": 1.0,
                "array": 2.5,
                "iterative approach": 2.0,
                "filter and sum": 1.0,
                "sorting to facilitate greedy selection": 1.0,
                "list": 2.0,
                "iterative computation": 2.0,
                "state transition": 1.0,
                "recursive with memoization": 1.0,
                "memoization": 1.0,
                "dictionary": 1.0,
                "iteration and conditional filtering": 1.0,
                "early filtering of non-relevant elements": 1.0
            },
            "pattern_distribution": {
                "algorithmic_patterns": 0.0,
                "data_structure_patterns": 0.0,
                "optimization_patterns": 0.0,
                "implementation_patterns": 0.0
            }
        },
        "error_handling-functions-very easy": {
            "success_rate": 0.0,
            "avg_attempts": 3.0,
            "patterns": {},
            "pattern_distribution": {
                "algorithmic_patterns": 0.0,
                "data_structure_patterns": 0.0,
                "optimization_patterns": 0.0,
                "implementation_patterns": 0.0
            }
        },
        "data_structures-error_handling-very easy": {
            "success_rate": 0.0,
            "avg_attempts": 3.0,
            "patterns": {
                "iterative processing": 1.5,
                "none": 3.0,
                "list": 3.0,
                "sequential processing": 1.0,
                "linked list manipulation": 1.0,
                "singly linked list": 1.0,
                "early exit for empty stack": 1.0,
                "linear data structure manipulation": 1.0,
                "linked list operations": 1.0,
                "linked list": 1.0,
                "hash table implementation": 1.0,
                "dictionary": 1.0,
                "simple iterative processing": 1.0
            },
            "pattern_distribution": {
                "algorithmic_patterns": 0.0,
                "data_structure_patterns": 0.3333333333333333,
                "optimization_patterns": 0.0,
                "implementation_patterns": 0.3333333333333333
            }
        },
        "data_structures-searching-very easy": {
            "success_rate": 0.0,
            "avg_attempts": 3.0,
            "patterns": {
                "binary search": 2.0,
                "early exit upon finding target": 1.0,
                "search narrowing using binary search": 1.0,
                "array": 5.0,
                "linear search": 4.0,
                "divide and conquer": 1.0,
                "pointer manipulation": 1.0,
                "single pass traversal": 1.0,
                "list": 5.0,
                "early exit on match": 1.0
            },
            "pattern_distribution": {
                "algorithmic_patterns": 0.0,
                "data_structure_patterns": 0.0,
                "optimization_patterns": 0.0,
                "implementation_patterns": 0.0
            }
        },
        "algorithms-error_handling-very easy": {
            "success_rate": 1.0,
            "avg_attempts": 3.0,
            "patterns": {
                "conditional checks": 3.0,
                "early return for error handling": 1.0,
                "integer": 1.0,
                "conditional checking": 1.0,
                "primitive types": 1.0,
                "early returns to avoid unnecessary checks": 1.0,
                "string": 2.0,
                "string manipulation": 1.0,
                "slicing for reversal": 1.0,
                "early return": 1.0,
                "primitive data types": 1.0
            },
            "pattern_distribution": {
                "algorithmic_patterns": 0.0,
                "data_structure_patterns": 0.0,
                "optimization_patterns": 0.0,
                "implementation_patterns": 0.0
            }
        },
        "algorithms-dynamic_programming-very easy": {
            "success_rate": 0.0,
            "avg_attempts": 3.0,
            "patterns": {
                "dynamic programming": 5.0,
                "iterative approach": 4.0,
                "array": 4.0,
                "bottom-up dynamic programming": 1.0,
                "tabulation": 1.0,
                "2D array": 1.0
            },
            "pattern_distribution": {
                "algorithmic_patterns": 0.0,
                "data_structure_patterns": 0.0,
                "optimization_patterns": 0.0,
                "implementation_patterns": 0.0
            }
        },
        "dynamic_programming-error_handling-very easy": {
            "success_rate": 0.0,
            "avg_attempts": 3.0,
            "patterns": {
                "dynamic programming": 5.0,
                "tabulation": 3.0,
                "2D list": 1.0,
                "iterative approach": 1.0,
                "array": 4.0,
                "state transition": 1.0,
                "iterative computation": 1.0
            },
            "pattern_distribution": {
                "algorithmic_patterns": 0.0,
                "data_structure_patterns": 0.0,
                "optimization_patterns": 0.0,
                "implementation_patterns": 0.0
            }
        },
        "recursion-searching-very easy": {
            "success_rate": 0.4,
            "avg_attempts": 3.0,
            "patterns": {
                "recursion": 4.5,
                "divide and conquer": 1.5,
                "integer": 1.0,
                "tail recursion": 2.0,
                "string": 3.0,
                "iteration": 1.0,
                "array": 3.0,
                "none": 2.0
            },
            "pattern_distribution": {
                "algorithmic_patterns": 0.0,
                "data_structure_patterns": 0.0,
                "optimization_patterns": 0.0,
                "implementation_patterns": 0.0
            }
        },
        "searching-sorting-very easy": {
            "success_rate": 0.2,
            "avg_attempts": 3.0,
            "patterns": {
                "sort after transformation": 1.0,
                "list": 1.0,
                "linear search": 1.0,
                "early exit": 1.0,
                "array": 2.5,
                "direct access": 1.0,
                "leveraging sorted property": 1.0,
                "set data structure for uniqueness": 1.0,
                "use of set to automatically handle duplicates": 1.0,
                "set": 1.0,
                "simple concatenation and sorting": 1.0,
                "none": 1.0,
                "two-pointer technique": 1.0,
                "single pass": 1.0,
                "in-place computation": 1.0,
                "mathematical formula": 1.0,
                "use of arithmetic series formula": 1.0,
                "frequency counting": 2.0,
                "use of dictionary for frequency counting": 1.0,
                "dictionary": 2.0,
                "dictionary for frequency counting": 1.0,
                "hashing": 1.0,
                "early exit on duplicate detection": 1.0
            },
            "pattern_distribution": {
                "algorithmic_patterns": 0.0,
                "data_structure_patterns": 0.5,
                "optimization_patterns": 0.0,
                "implementation_patterns": 0.0
            }
        },
        "dynamic_programming-sorting-very easy": {
            "success_rate": 0.06666666666666667,
            "avg_attempts": 3.0,
            "patterns": {
                "dynamic programming": 2.3333333333333335,
                "iterative approach": 1.3333333333333333,
                "space optimization by using variables instead of arrays": 1.0,
                "variables": 1.0,
                "bottom-up approach": 1.0,
                "array": 2.3333333333333335,
                "iterative filling of a DP table": 1.0,
                "2D array": 1.0,
                "tabulation": 1.0,
                "sorting and set usage": 1.5,
                "use of set for uniqueness": 1.0,
                "set": 2.0,
                "list": 2.0,
                "sorting": 2.0,
                "frequency counting and sorting": 1.0,
                "dictionary for frequency counting": 1.0,
                "dictionary": 1.0,
                "use of built-in sorting function": 1.0,
                "use of set to automatically handle duplicates": 1.0,
                "state transition": 1.0,
                "sorting to simplify unique count": 1.0,
                "sorting and selection": 1.0,
                "sorting and iteration": 1.0,
                "use of built-in sort function": 1.0
            },
            "pattern_distribution": {
                "algorithmic_patterns": 0.0,
                "data_structure_patterns": 0.0,
                "optimization_patterns": 0.3333333333333333,
                "implementation_patterns": 0.0
            }
        },
        "functions-loops-easy": {
            "success_rate": 0.0,
            "avg_attempts": 3.0,
            "patterns": {
                "iteration": 4.0,
                "case normalization": 1.0,
                "string": 2.0,
                "string manipulation": 1.0,
                "slicing": 1.0,
                "list": 3.0,
                "early return for empty list": 1.0
            },
            "pattern_distribution": {
                "algorithmic_patterns": 0.0,
                "data_structure_patterns": 0.0,
                "optimization_patterns": 0.0,
                "implementation_patterns": 0.0
            }
        },
        "algorithms-conditionals-loops-easy": {
            "success_rate": 0.2,
            "avg_attempts": 3.0,
            "patterns": {
                "iteration with conditional checks": 1.0,
                "early condition checks for combined multiples": 1.0,
                "list": 3.0,
                "iteration and conditional checks": 2.0,
                "use of set for O(1) membership checking": 1.0,
                "dictionary": 2.0,
                "set": 1.0,
                "single pass through the list": 1.0,
                "two-pass approach": 1.0,
                "list slicing for reversal": 1.0,
                "iteration and conditional categorization": 1.0
            },
            "pattern_distribution": {
                "algorithmic_patterns": 0.0,
                "data_structure_patterns": 0.0,
                "optimization_patterns": 0.0,
                "implementation_patterns": 0.0
            }
        },
        "functions-loops-searching-easy": {
            "success_rate": 0.6,
            "avg_attempts": 3.0,
            "patterns": {
                "backtracking": 1.0,
                "early termination": 1.0,
                "in-place modification for visited tracking": 1.0,
                "2D list": 2.0,
                "depth-first search (DFS)": 1.0,
                "in-place modification": 1.0,
                "iteration": 1.0,
                "use of set for O(1) average time complexity lookup": 1.0,
                "set": 1.0,
                "frequency counting": 1.0,
                "single pass frequency counting followed by a linear scan": 1.0,
                "dictionary": 1.0,
                "iterative summation": 1.0,
                "conditional checks to filter odd numbers": 1.0,
                "integer": 1.0
            },
            "pattern_distribution": {
                "algorithmic_patterns": 0.0,
                "data_structure_patterns": 0.0,
                "optimization_patterns": 0.0,
                "implementation_patterns": 0.0
            }
        },
        "dynamic_programming-loops-easy": {
            "success_rate": 0.0,
            "avg_attempts": 3.0,
            "patterns": {
                "dynamic programming": 3.0,
                "bottom-up approach": 1.0,
                "array": 4.0,
                "iterative dynamic programming": 1.0,
                "iterative approach": 2.0,
                "Kadane's algorithm": 1.0,
                "iterative update": 1.0,
                "local and global maxima tracking": 1.0,
                "tabulation": 1.0,
                "2D array": 1.0,
                "space-efficient single array": 1.0
            },
            "pattern_distribution": {
                "algorithmic_patterns": 0.5,
                "data_structure_patterns": 0.0,
                "optimization_patterns": 0.0,
                "implementation_patterns": 0.0
            }
        },
        "algorithms-error_handling-easy": {
            "success_rate": 0.0,
            "avg_attempts": 3.0,
            "patterns": {},
            "pattern_distribution": {
                "algorithmic_patterns": 0.0,
                "data_structure_patterns": 0.0,
                "optimization_patterns": 0.0,
                "implementation_patterns": 0.0
            }
        },
        "data_structures-dynamic_programming-easy": {
            "success_rate": 0.0,
            "avg_attempts": 3.0,
            "patterns": {
                "dynamic programming": 5.0,
                "bottom-up approach": 2.0,
                "array": 5.0,
                "tabulation": 1.0,
                "Kadane's Algorithm": 1.0,
                "iterative approach": 1.0,
                "state transition": 1.0
            },
            "pattern_distribution": {
                "algorithmic_patterns": 1.0,
                "data_structure_patterns": 0.0,
                "optimization_patterns": 0.0,
                "implementation_patterns": 0.0
            }
        },
        "data_structures-error_handling-easy": {
            "success_rate": 0.0,
            "avg_attempts": 3.0,
            "patterns": {
                "simulation of stack operations": 1.0,
                "list": 2.0,
                "simulation of queue operations": 1.0
            },
            "pattern_distribution": {
                "algorithmic_patterns": 0.0,
                "data_structure_patterns": 0.0,
                "optimization_patterns": 0.0,
                "implementation_patterns": 0.0
            }
        },
        "data_structures-error_handling-medium": {
            "success_rate": 0.0,
            "avg_attempts": 3.0,
            "patterns": {},
            "pattern_distribution": {
                "algorithmic_patterns": 0.0,
                "data_structure_patterns": 0.0,
                "optimization_patterns": 0.0,
                "implementation_patterns": 0.0
            }
        },
        "data_structures-error_handling-hard": {
            "success_rate": 0.0,
            "avg_attempts": 3.0,
            "patterns": {
                "string parsing and frequency counting": 1.0,
                "regular expressions for parsing": 1.0,
                "dictionary": 2.0,
                "command parsing and execution": 1.0,
                "early error detection": 1.0,
                "iterative parsing": 1.0,
                "early termination": 1.0,
                "skip whitespace": 1.0,
                "string": 1.0
            },
            "pattern_distribution": {
                "algorithmic_patterns": 0.0,
                "data_structure_patterns": 0.0,
                "optimization_patterns": 0.0,
                "implementation_patterns": 0.0
            }
        },
        "data_structures-dynamic_programming-medium": {
            "success_rate": 0.0,
            "avg_attempts": 3.0,
            "patterns": {
                "dynamic programming": 5.0,
                "iterative approach": 3.0,
                "state storage in dp array": 1.0,
                "array": 3.0,
                "space optimization": 1.0,
                "bottom-up approach": 2.0,
                "2D array": 2.0
            },
            "pattern_distribution": {
                "algorithmic_patterns": 0.0,
                "data_structure_patterns": 0.0,
                "optimization_patterns": 1.0,
                "implementation_patterns": 0.0
            }
        },
        "searching-sorting-easy": {
            "success_rate": 0.2,
            "avg_attempts": 3.0,
            "patterns": {
                "sorting": 1.0,
                "sorting in descending order": 1.0,
                "array": 2.0,
                "simple concatenation and sorting": 1.0,
                "frequency counting and sorting": 1.0,
                "dictionary for frequency counting": 1.0,
                "dictionary": 1.0
            },
            "pattern_distribution": {
                "algorithmic_patterns": 0.0,
                "data_structure_patterns": 0.0,
                "optimization_patterns": 0.0,
                "implementation_patterns": 0.0
            }
        },
        "conditionals-error_handling-sorting-easy": {
            "success_rate": 0.2,
            "avg_attempts": 3.0,
            "patterns": {
                "sorting and validation": 4.0,
                "early exit on finding a negative integer": 1.0,
                "list": 5.0,
                "sorting and conditional checking": 1.0,
                "early exit on condition failure": 1.0,
                "early termination on invalid price detection": 1.0,
                "tuple": 2.0,
                "early exit on invalid input": 1.0
            },
            "pattern_distribution": {
                "algorithmic_patterns": 0.0,
                "data_structure_patterns": 0.0,
                "optimization_patterns": 0.0,
                "implementation_patterns": 0.0
            }
        },
        "algorithms-data_structures-dynamic_programming-medium": {
            "success_rate": 0.0,
            "avg_attempts": 3.0,
            "patterns": {
                "dynamic programming": 3.0,
                "bottom-up approach": 2.0,
                "array": 1.0,
                "2D array": 2.0,
                "dynamic programming and backtracking": 1.0,
                "memoization": 1.0,
                "early termination": 1.0,
                "dictionary (memo)": 1.0,
                "list (dp, res)": 1.0,
                "iterative filling of DP table": 1.0
            },
            "pattern_distribution": {
                "algorithmic_patterns": 0.0,
                "data_structure_patterns": 0.0,
                "optimization_patterns": 0.0,
                "implementation_patterns": 0.0
            }
        },
        "data_structures-loops-very easy": {
            "success_rate": 0.0,
            "avg_attempts": 3.0,
            "patterns": {},
            "pattern_distribution": {
                "algorithmic_patterns": 0.0,
                "data_structure_patterns": 0.0,
                "optimization_patterns": 0.0,
                "implementation_patterns": 0.0
            }
        },
        "algorithms-data_structures-very easy": {
            "success_rate": 0.6,
            "avg_attempts": 3.0,
            "patterns": {
                "linear search": 1.0,
                "single pass iteration": 1.0,
                "array": 2.0,
                "set data structure utilization": 1.0,
                "use of set to automatically handle duplicates": 1.0,
                "set": 1.0,
                "iterative summation": 1.0,
                "array manipulation": 1.0,
                "slicing": 1.0,
                "list": 1.0,
                "conditional logic": 1.0
            },
            "pattern_distribution": {
                "algorithmic_patterns": 0.0,
                "data_structure_patterns": 1.0,
                "optimization_patterns": 0.0,
                "implementation_patterns": 0.0
            }
        },
        "data_structures-recursion-very easy": {
            "success_rate": 0.0,
            "avg_attempts": 3.0,
            "patterns": {
                "recursion": 5.0,
                "divide and conquer": 2.0,
                "integer": 3.0,
                "base case optimization": 1.0,
                "string": 2.0,
                "tail recursion": 1.0
            },
            "pattern_distribution": {
                "algorithmic_patterns": 0.0,
                "data_structure_patterns": 0.0,
                "optimization_patterns": 1.0,
                "implementation_patterns": 0.0
            }
        },
        "data_structures-sorting-very easy": {
            "success_rate": 0.4,
            "avg_attempts": 3.0,
            "patterns": {
                "two-pointer technique": 2.0,
                "iterative merging": 1.0,
                "list": 2.0,
                "hashing with sorted keys": 1.0,
                "use of sorted string as hash key": 1.0,
                "dictionary": 1.0,
                "in-place modification": 1.0,
                "array": 1.0,
                "linear search": 1.0,
                "early return for empty list": 1.0,
                "set data structure for uniqueness": 1.0,
                "leveraging set for automatic deduplication": 1.0,
                "set": 1.0
            },
            "pattern_distribution": {
                "algorithmic_patterns": 0.0,
                "data_structure_patterns": 1.0,
                "optimization_patterns": 0.0,
                "implementation_patterns": 0.0
            }
        },
        "algorithms-sorting-very easy": {
            "success_rate": 0.0,
            "avg_attempts": 3.0,
            "patterns": {
                "two-pass partitioning": 1.0,
                "separation of concerns": 1.0,
                "two-pass approach": 1.0,
                "list": 5.0,
                "custom sorting": 2.0,
                "stable sort using tuple keys": 1.0,
                "stable sort": 1.0,
                "sorting": 1.0,
                "stable sorting": 1.0,
                "tuple": 1.0,
                "built-in sorting": 1.0,
                "leveraging Python's Timsort": 1.0
            },
            "pattern_distribution": {
                "algorithmic_patterns": 0.0,
                "data_structure_patterns": 0.0,
                "optimization_patterns": 0.0,
                "implementation_patterns": 0.0
            }
        },
        "algorithms-searching-very easy": {
            "success_rate": 0.0,
            "avg_attempts": 3.0,
            "patterns": {
                "binary search": 3.0,
                "two-pointer technique": 1.0,
                "array": 5.0,
                "divide and conquer": 1.0,
                "binary search for rotated array": 1.0,
                "linear search": 2.0
            },
            "pattern_distribution": {
                "algorithmic_patterns": 0.0,
                "data_structure_patterns": 0.0,
                "optimization_patterns": 0.0,
                "implementation_patterns": 0.0
            }
        },
        "error_handling-searching-very easy": {
            "success_rate": 0.0,
            "avg_attempts": 3.0,
            "patterns": {
                "built-in function usage": 1.0,
                "leveraging built-in string methods": 1.0,
                "string": 3.0,
                "substring search": 1.0,
                "case normalization": 1.0,
                "linear search": 1.0,
                "early return for empty list": 1.0,
                "list": 2.0,
                "linear search using built-in function": 1.0,
                "use of built-in function for efficiency": 1.0,
                "string reversal and comparison": 1.0,
                "slicing for reversal": 1.0
            },
            "pattern_distribution": {
                "algorithmic_patterns": 0.0,
                "data_structure_patterns": 0.0,
                "optimization_patterns": 0.0,
                "implementation_patterns": 0.0
            }
        },
        "recursion-sorting-very easy": {
            "success_rate": 0.0,
            "avg_attempts": 3.0,
            "patterns": {
                "two-pointer technique": 1.0,
                "sorting after squaring": 1.0,
                "list": 4.0,
                "recursive sorting": 1.0,
                "divide and conquer": 2.0,
                "recursive merging": 1.0,
                "recursive selection sort": 1.0,
                "recursive approach": 1.0,
                "iterative linear search": 1.0,
                "array": 1.0
            },
            "pattern_distribution": {
                "algorithmic_patterns": 0.0,
                "data_structure_patterns": 0.0,
                "optimization_patterns": 0.0,
                "implementation_patterns": 0.0
            }
        },
        "conditionals-loops-searching-very easy": {
            "success_rate": 0.2,
            "avg_attempts": 3.0,
            "patterns": {
                "brute force iteration": 1.0,
                "integer": 1.0,
                "linear search": 1.0,
                "single pass": 1.0,
                "array": 2.0,
                "iteration and conditional check": 1.0,
                "early return if array is empty": 1.0,
                "iteration with conditional checks": 1.0,
                "case-insensitive comparison using lowercase conversion": 1.0,
                "string": 2.0,
                "iteration": 1.0
            },
            "pattern_distribution": {
                "algorithmic_patterns": 0.0,
                "data_structure_patterns": 0.0,
                "optimization_patterns": 0.0,
                "implementation_patterns": 0.0
            }
        },
        "algorithms-data_structures-loops-hard": {
            "success_rate": 0.0,
            "avg_attempts": 3.0,
            "patterns": {
                "hash set for O(1) lookups": 1.0,
                "early termination for non-sequence starts": 1.0,
                "set": 2.0,
                "sorting and greedy": 1.0,
                "sorting to simplify merging": 1.0,
                "single pass merge": 1.0,
                "list": 1.0,
                "sliding window with deque": 1.0,
                "deque for efficient max tracking": 1.0,
                "deque": 2.0,
                "topological sort": 1.0,
                "Kahn's algorithm for topological sorting": 1.0,
                "graph (adjacency list)": 1.0,
                "queue": 1.0,
                "breadth-first search (BFS)": 1.0,
                "early stopping when endWord is found": 1.0
            },
            "pattern_distribution": {
                "algorithmic_patterns": 1.0,
                "data_structure_patterns": 0.0,
                "optimization_patterns": 0.0,
                "implementation_patterns": 0.0
            }
        },
        "algorithms-data_structures-loops-very easy": {
            "success_rate": 0.0,
            "avg_attempts": 3.0,
            "patterns": {
                "iteration": 1.0,
                "case normalization": 1.0,
                "string": 2.0,
                "slicing": 1.0,
                "use of Python slicing for simplicity and efficiency": 1.0,
                "linear search": 1.0,
                "list": 3.0,
                "iterative accumulation": 1.0,
                "use of built-in function": 1.0,
                "iteration with set for uniqueness": 1.0,
                "set for O(1) average time complexity lookups": 1.0,
                "set": 1.0
            },
            "pattern_distribution": {
                "algorithmic_patterns": 0.0,
                "data_structure_patterns": 0.0,
                "optimization_patterns": 0.0,
                "implementation_patterns": 0.0
            }
        },
        "conditionals-dynamic_programming-easy": {
            "success_rate": 0.0,
            "avg_attempts": 3.0,
            "patterns": {
                "dynamic programming": 4.0,
                "iterative approach": 2.0,
                "array": 3.0,
                "bottom-up approach": 1.0,
                "in-place updates": 1.0,
                "iterative table filling": 1.0,
                "2D array": 1.0
            },
            "pattern_distribution": {
                "algorithmic_patterns": 0.0,
                "data_structure_patterns": 0.0,
                "optimization_patterns": 0.0,
                "implementation_patterns": 0.0
            }
        },
        "data_structures-functions-searching-very easy": {
            "success_rate": 0.8,
            "avg_attempts": 3.0,
            "patterns": {
                "linear search": 4.0,
                "list": 5.0,
                "early return for empty list": 1.0,
                "iterative summation": 1.0,
                "early return for empty input": 1.0
            },
            "pattern_distribution": {
                "algorithmic_patterns": 0.0,
                "data_structure_patterns": 0.0,
                "optimization_patterns": 0.0,
                "implementation_patterns": 0.0
            }
        },
        "algorithms-data_structures-loops-very hard": {
            "success_rate": 0.0,
            "avg_attempts": 3.0,
            "patterns": {
                "iterative boundary traversal": 1.0,
                "boundary checks to avoid revisiting elements": 1.0,
                "list": 1.0,
                "set-based iteration": 1.0,
                "set for O(1) lookups": 1.0,
                "set": 1.0,
                "hash map for two-sum complement": 1.0,
                "hash map usage to reduce complexity from O(n^4)": 1.0,
                "hash map": 1.0,
                "sliding window": 1.0,
                "two-pointer technique": 1.0,
                "dictionary": 1.0
            },
            "pattern_distribution": {
                "algorithmic_patterns": 0.0,
                "data_structure_patterns": 0.0,
                "optimization_patterns": 0.0,
                "implementation_patterns": 0.0
            }
        },
        "conditionals-dynamic_programming-medium": {
            "success_rate": 0.0,
            "avg_attempts": 3.0,
            "patterns": {
                "dynamic programming": 5.0,
                "precomputation of palindrome substrings": 1.0,
                "2D array": 2.0,
                "bottom-up approach": 4.0,
                "array": 3.0
            },
            "pattern_distribution": {
                "algorithmic_patterns": 0.0,
                "data_structure_patterns": 0.0,
                "optimization_patterns": 0.0,
                "implementation_patterns": 0.0
            }
        },
        "data_structures-functions-very easy": {
            "success_rate": 0.8,
            "avg_attempts": 3.0,
            "patterns": {
                "simulation": 1.0,
                "list": 2.0,
                "iterative processing": 1.0,
                "none": 1.0,
                "linked list operations": 1.0,
                "iterative traversal for add operation": 1.0,
                "linked list": 1.0,
                "dictionary operations": 1.0,
                "direct dictionary access": 1.0,
                "dictionary": 1.0,
                "set operations": 1.0,
                "use of set for O(1) average time complexity operations": 1.0,
                "set": 1.0
            },
            "pattern_distribution": {
                "algorithmic_patterns": 0.0,
                "data_structure_patterns": 0.0,
                "optimization_patterns": 0.0,
                "implementation_patterns": 0.0
            }
        },
        "dynamic_programming-functions-very easy": {
            "success_rate": 0.0,
            "avg_attempts": 3.0,
            "patterns": {
                "iterative approach": 3.0,
                "iterative calculation to reduce space usage": 1.0,
                "variables": 2.0,
                "dynamic programming": 3.0,
                "array": 2.0,
                "Kadane's algorithm": 1.0,
                "iterative update of current and maximum sums": 1.0,
                "bottom-up approach": 1.0,
                "2D array": 1.0
            },
            "pattern_distribution": {
                "algorithmic_patterns": 1.0,
                "data_structure_patterns": 0.0,
                "optimization_patterns": 0.0,
                "implementation_patterns": 0.0
            }
        },
        "data_structures-dynamic_programming-very easy": {
            "success_rate": 0.0,
            "avg_attempts": 3.0,
            "patterns": {
                "dynamic programming": 4.0,
                "iterative approach": 3.0,
                "in-place updates": 1.0,
                "array": 5.0,
                "bottom-up calculation": 1.0,
                "sorting and selection": 1.0,
                "sorting to find potential candidates for maximum product": 1.0,
                "tabulation": 1.0
            },
            "pattern_distribution": {
                "algorithmic_patterns": 0.0,
                "data_structure_patterns": 0.0,
                "optimization_patterns": 0.0,
                "implementation_patterns": 0.0
            }
        },
        "dynamic_programming-searching-very easy": {
            "success_rate": 0.6,
            "avg_attempts": 3.0,
            "patterns": {
                "mathematical calculation": 1.0,
                "direct computation using absolute difference": 1.0,
                "combinatorial mathematics": 1.0,
                "use of mathematical formula for combinations": 1.0,
                "dynamic programming": 3.0,
                "iterative approach": 3.0,
                "array": 3.0,
                "state transition": 1.0
            },
            "pattern_distribution": {
                "algorithmic_patterns": 0.0,
                "data_structure_patterns": 0.0,
                "optimization_patterns": 0.0,
                "implementation_patterns": 0.0
            }
        },
        "functions-searching-sorting-hard": {
            "success_rate": 0.0,
            "avg_attempts": 3.0,
            "patterns": {
                "binary search": 1.0,
                "partitioning": 2.0,
                "conditional checks": 1.0,
                "array": 2.0,
                "quickselect": 1.0,
                "in-place swaps": 1.0,
                "sliding window": 1.0,
                "character frequency counting": 1.0,
                "Counter": 1.0,
                "greedy algorithm": 1.0,
                "priority queue (min-heap) for efficient end time management": 1.0,
                "priority queue (min-heap)": 1.0,
                "sorting and binary search": 1.0,
                "binary search via bisect module": 1.0,
                "list": 1.0
            },
            "pattern_distribution": {
                "algorithmic_patterns": 1.0,
                "data_structure_patterns": 0.0,
                "optimization_patterns": 0.0,
                "implementation_patterns": 0.0
            }
        },
        "conditionals-functions-searching-sorting-hard": {
            "success_rate": 0.1,
            "avg_attempts": 3.0,
            "patterns": {
                "sorting": 3.0,
                "set for uniqueness": 1.0,
                "set": 1.0,
                "list": 5.0,
                "hashing": 2.0,
                "sorting for key generation": 2.0,
                "dictionary": 3.0,
                "binary search": 1.0,
                "binary search on smaller array": 1.0,
                "array": 2.0,
                "heap-based approach": 1.0,
                "min-heap to maintain order of elements": 1.0,
                "min-heap": 1.0,
                "brute force with sorting": 1.0,
                "sorting by computed key": 1.0,
                "sorting to simplify maximum product calculation": 1.0,
                "frequency counting and sorting": 1.0,
                "sorting by frequency and index": 1.0,
                "sorting and iterative merging": 1.0,
                "sorting by start time": 1.0,
                "iterative merge": 1.0
            },
            "pattern_distribution": {
                "algorithmic_patterns": 0.0,
                "data_structure_patterns": 0.0,
                "optimization_patterns": 0.0,
                "implementation_patterns": 0.0
            }
        },
        "algorithms-loops-sorting-medium": {
            "success_rate": 0.4,
            "avg_attempts": 3.0,
            "patterns": {
                "sorting and median calculation": 1.0,
                "in-place sorting": 1.0,
                "list": 1.0,
                "sorting": 1.0,
                "built-in sort function": 1.0,
                "array": 1.0
            },
            "pattern_distribution": {
                "algorithmic_patterns": 0.0,
                "data_structure_patterns": 0.0,
                "optimization_patterns": 0.0,
                "implementation_patterns": 0.0
            }
        },
        "conditionals-functions-searching-sorting-very hard": {
            "success_rate": 0.0,
            "avg_attempts": 3.0,
            "patterns": {
                "sorting and linear search": 1.0,
                "tuple unpacking for sorting": 1.0,
                "list": 1.0,
                "tuple": 1.0,
                "frequency counting and heap manipulation": 1.0,
                "heap for efficient frequency extraction": 1.0,
                "Counter": 1.0,
                "min-heap": 1.0,
                "heap-based selection": 1.0,
                "use of heap for efficient k-selection": 1.0,
                "heap": 1.0,
                "greedy scheduling": 1.0,
                "sorting": 1.0,
                "conditional checks": 1.0,
                "dictionary": 1.0
            },
            "pattern_distribution": {
                "algorithmic_patterns": 0.0,
                "data_structure_patterns": 0.0,
                "optimization_patterns": 0.0,
                "implementation_patterns": 0.0
            }
        },
        "recursion-searching-easy": {
            "success_rate": 0.6,
            "avg_attempts": 3.0,
            "patterns": {
                "recursive binary search": 3.0,
                "divide and conquer": 3.0,
                "array": 5.0,
                "binary search": 1.0,
                "divide and conquer using recursion": 1.0,
                "binary search approach": 1.0,
                "recursion": 1.0,
                "tail recursion could be optimized to iterative": 1.0
            },
            "pattern_distribution": {
                "algorithmic_patterns": 0.0,
                "data_structure_patterns": 0.0,
                "optimization_patterns": 0.0,
                "implementation_patterns": 0.0
            }
        },
        "error_handling-loops-recursion-very easy": {
            "success_rate": 0.8,
            "avg_attempts": 3.0,
            "patterns": {
                "recursion": 4.0,
                "none": 2.0,
                "list": 2.0,
                "base case optimization": 1.0,
                "integer": 1.0,
                "dynamic programming": 1.0,
                "iterative approach": 1.0,
                "array storage for memoization": 1.0,
                "string": 2.0,
                "tail recursion": 1.0
            },
            "pattern_distribution": {
                "algorithmic_patterns": 0.0,
                "data_structure_patterns": 0.0,
                "optimization_patterns": 1.0,
                "implementation_patterns": 0.0
            }
        },
        "data_structures-error_handling-loops-recursion-very easy": {
            "success_rate": 0.0,
            "avg_attempts": 3.0,
            "patterns": {
                "recursion": 5.0,
                "tail recursion": 2.0,
                "list": 5.0,
                "recursive decomposition": 1.0,
                "recursive traversal": 2.0,
                "filtering non-integers": 1.0
            },
            "pattern_distribution": {
                "algorithmic_patterns": 0.0,
                "data_structure_patterns": 0.0,
                "optimization_patterns": 0.0,
                "implementation_patterns": 0.0
            }
        }
    },
    "pattern_distributions": {
        "error_handling-loops": {
            "iteration and condition checking": 1.0,
            "early return for empty list": 3.0,
            "list": 4.5,
            "iteration": 2.0,
            "list slicing": 1.0,
            "built-in slicing for reverse": 1.0,
            "iteration with error handling": 1.0,
            "early skipping of non-integer elements": 1.0,
            "iteration and filtering": 1.0,
            "early skipping of non-integers": 1.0,
            "filtering with type checking": 1.0,
            "early exit on type mismatch": 1.0,
            "iteration with type checking": 1.0,
            "early exit on non-integer types": 1.0,
            "iteration and type checking": 1.0,
            "early filtering of non-string elements": 1.0
        },
        "loops-recursion": {
            "recursion": 5.0,
            "tail recursion": 1.0,
            "none": 3.0,
            "divide and conquer": 1.0,
            "string": 1.0,
            "base case to prevent infinite recursion": 1.0
        },
        "conditionals-data_structures": {
            "iterative approach": 1.0,
            "simple conditional checks": 1.0,
            "list": 2.0,
            "conditional check": 1.0,
            "direct conditional evaluation": 1.0,
            "conditional logic": 1.0,
            "none needed due to simplicity": 1.0,
            "none": 1.0,
            "conditional checks": 1.0,
            "conditional statements": 1.0
        },
        "algorithms-conditionals": {
            "conditional logic": 3.0,
            "conditional statements": 2.0
        },
        "conditionals-sorting": {
            "sorting and filtering": 2.0,
            "list comprehension for filtering": 1.5,
            "list": 5.0,
            "list comprehension": 1.0,
            "use of built-in functions for efficiency": 1.0,
            "sorting": 1.0,
            "use of built-in sorting function": 1.0,
            "list comprehension for concise filtering": 1.0,
            "filtering and sorting": 1.0,
            "categorization and sorting": 1.5,
            "single pass categorization after sorting": 1.0,
            "dictionary": 3.5,
            "classification and sorting": 1.0,
            "sorting before classification": 1.0,
            "sorting before categorization": 1.0,
            "built-in sort function": 1.0,
            "sorting and grouping": 1.0,
            "sorting before grouping to ensure order within groups": 1.0,
            "sorting and conditional classification": 1.0,
            "sorting with custom key": 1.0,
            "None": 1.0
        },
        "conditionals-dynamic_programming": {
            "dynamic programming": 7.0,
            "bottom-up approach": 3.0,
            "array": 5.5,
            "iterative approach": 2.0,
            "filter and sum": 1.0,
            "sorting to facilitate greedy selection": 1.0,
            "list": 2.0,
            "iterative computation": 2.0,
            "state transition": 1.0,
            "recursive with memoization": 1.0,
            "memoization": 1.0,
            "dictionary": 1.0,
            "iteration and conditional filtering": 1.0,
            "early filtering of non-relevant elements": 1.0,
            "in-place updates": 1.0,
            "iterative table filling": 1.0,
            "2D array": 3.0,
            "precomputation of palindrome substrings": 1.0
        },
        "data_structures-error_handling": {
            "iterative processing": 1.5,
            "none": 3.0,
            "list": 4.0,
            "sequential processing": 1.0,
            "linked list manipulation": 1.0,
            "singly linked list": 1.0,
            "simulation of stack operations": 1.0,
            "simulation of queue operations": 1.0,
            "string parsing and frequency counting": 1.0,
            "regular expressions for parsing": 1.0,
            "dictionary": 1.5,
            "command parsing and execution": 1.0,
            "early error detection": 1.0,
            "iterative parsing": 1.0,
            "early termination": 1.0,
            "skip whitespace": 1.0,
            "string": 1.0,
            "early exit for empty stack": 1.0,
            "linear data structure manipulation": 1.0,
            "linked list operations": 1.0,
            "linked list": 1.0,
            "hash table implementation": 1.0,
            "simple iterative processing": 1.0
        },
        "algorithms-error_handling": {
            "conditional checks": 3.0,
            "early return for error handling": 1.0,
            "integer": 1.0,
            "conditional checking": 1.0,
            "primitive types": 1.0,
            "early returns to avoid unnecessary checks": 1.0,
            "string": 2.0,
            "string manipulation": 1.0,
            "slicing for reversal": 1.0,
            "early return": 1.0,
            "primitive data types": 1.0
        },
        "algorithms-dynamic_programming": {
            "dynamic programming": 5.0,
            "iterative approach": 4.0,
            "array": 4.0,
            "bottom-up dynamic programming": 1.0,
            "tabulation": 1.0,
            "2D array": 1.0
        },
        "dynamic_programming-error_handling": {
            "dynamic programming": 5.0,
            "tabulation": 3.0,
            "2D list": 1.0,
            "iterative approach": 1.0,
            "array": 4.0,
            "state transition": 1.0,
            "iterative computation": 1.0
        },
        "recursion-searching": {
            "recursion": 5.0,
            "divide and conquer": 3.0,
            "integer": 1.0,
            "tail recursion": 2.0,
            "string": 3.0,
            "iteration": 1.0,
            "array": 5.5,
            "none": 2.0,
            "recursive binary search": 3.0,
            "binary search": 1.0,
            "divide and conquer using recursion": 1.0,
            "binary search approach": 1.0,
            "tail recursion could be optimized to iterative": 1.0
        },
        "searching-sorting": {
            "sort after transformation": 1.0,
            "list": 1.0,
            "linear search": 1.0,
            "early exit": 1.0,
            "array": 3.5,
            "direct access": 1.0,
            "leveraging sorted property": 1.0,
            "set data structure for uniqueness": 1.0,
            "use of set to automatically handle duplicates": 1.0,
            "set": 1.0,
            "simple concatenation and sorting": 2.0,
            "none": 1.0,
            "sorting": 1.0,
            "sorting in descending order": 1.0,
            "frequency counting and sorting": 1.0,
            "dictionary for frequency counting": 1.0,
            "dictionary": 1.5,
            "two-pointer technique": 1.0,
            "single pass": 1.0,
            "in-place computation": 1.0,
            "mathematical formula": 1.0,
            "use of arithmetic series formula": 1.0,
            "frequency counting": 2.0,
            "use of dictionary for frequency counting": 1.0,
            "hashing": 1.0,
            "early exit on duplicate detection": 1.0
        },
        "dynamic_programming-sorting": {
            "dynamic programming": 2.3333333333333335,
            "iterative approach": 1.3333333333333333,
            "space optimization by using variables instead of arrays": 1.0,
            "variables": 1.0,
            "bottom-up approach": 1.0,
            "array": 2.3333333333333335,
            "iterative filling of a DP table": 1.0,
            "2D array": 1.0,
            "tabulation": 1.0,
            "sorting and set usage": 1.5,
            "use of set for uniqueness": 1.0,
            "set": 2.0,
            "list": 2.0,
            "sorting": 2.0,
            "frequency counting and sorting": 1.0,
            "dictionary for frequency counting": 1.0,
            "dictionary": 1.0,
            "use of built-in sorting function": 1.0,
            "use of set to automatically handle duplicates": 1.0,
            "state transition": 1.0,
            "sorting to simplify unique count": 1.0,
            "sorting and selection": 1.0,
            "sorting and iteration": 1.0,
            "use of built-in sort function": 1.0
        },
        "functions-loops": {
            "iteration": 4.0,
            "case normalization": 1.0,
            "string": 2.0,
            "string manipulation": 1.0,
            "slicing": 1.0,
            "list": 3.0,
            "early return for empty list": 1.0
        },
        "algorithms-conditionals-loops": {
            "iteration with conditional checks": 1.0,
            "early condition checks for combined multiples": 1.0,
            "list": 3.0,
            "iteration and conditional checks": 2.0,
            "use of set for O(1) membership checking": 1.0,
            "dictionary": 2.0,
            "set": 1.0,
            "single pass through the list": 1.0,
            "two-pass approach": 1.0,
            "list slicing for reversal": 1.0,
            "iteration and conditional categorization": 1.0
        },
        "functions-loops-searching": {
            "backtracking": 1.0,
            "early termination": 1.0,
            "in-place modification for visited tracking": 1.0,
            "2D list": 2.0,
            "depth-first search (DFS)": 1.0,
            "in-place modification": 1.0,
            "iteration": 1.0,
            "use of set for O(1) average time complexity lookup": 1.0,
            "set": 1.0,
            "frequency counting": 1.0,
            "single pass frequency counting followed by a linear scan": 1.0,
            "dictionary": 1.0,
            "iterative summation": 1.0,
            "conditional checks to filter odd numbers": 1.0,
            "integer": 1.0
        },
        "dynamic_programming-loops": {
            "dynamic programming": 3.0,
            "bottom-up approach": 1.0,
            "array": 4.0,
            "iterative dynamic programming": 1.0,
            "iterative approach": 2.0,
            "Kadane's algorithm": 1.0,
            "iterative update": 1.0,
            "local and global maxima tracking": 1.0,
            "tabulation": 1.0,
            "2D array": 1.0,
            "space-efficient single array": 1.0
        },
        "data_structures-dynamic_programming": {
            "dynamic programming": 7.0,
            "bottom-up approach": 4.0,
            "array": 6.5,
            "tabulation": 1.0,
            "Kadane's Algorithm": 1.0,
            "iterative approach": 3.5,
            "state transition": 1.0,
            "state storage in dp array": 1.0,
            "space optimization": 1.0,
            "2D array": 2.0,
            "in-place updates": 1.0,
            "bottom-up calculation": 1.0,
            "sorting and selection": 1.0,
            "sorting to find potential candidates for maximum product": 1.0
        },
        "conditionals-error_handling-sorting": {
            "sorting and validation": 4.0,
            "early exit on finding a negative integer": 1.0,
            "list": 5.0,
            "sorting and conditional checking": 1.0,
            "early exit on condition failure": 1.0,
            "early termination on invalid price detection": 1.0,
            "tuple": 2.0,
            "early exit on invalid input": 1.0
        },
        "algorithms-data_structures-dynamic_programming": {
            "dynamic programming": 3.0,
            "bottom-up approach": 2.0,
            "array": 1.0,
            "2D array": 2.0,
            "dynamic programming and backtracking": 1.0,
            "memoization": 1.0,
            "early termination": 1.0,
            "dictionary (memo)": 1.0,
            "list (dp, res)": 1.0,
            "iterative filling of DP table": 1.0
        },
        "algorithms-data_structures": {
            "linear search": 1.0,
            "single pass iteration": 1.0,
            "array": 2.0,
            "set data structure utilization": 1.0,
            "use of set to automatically handle duplicates": 1.0,
            "set": 1.0,
            "iterative summation": 1.0,
            "array manipulation": 1.0,
            "slicing": 1.0,
            "list": 1.0,
            "conditional logic": 1.0
        },
        "data_structures-recursion": {
            "recursion": 5.0,
            "divide and conquer": 2.0,
            "integer": 3.0,
            "base case optimization": 1.0,
            "string": 2.0,
            "tail recursion": 1.0
        },
        "data_structures-sorting": {
            "two-pointer technique": 2.0,
            "iterative merging": 1.0,
            "list": 2.0,
            "hashing with sorted keys": 1.0,
            "use of sorted string as hash key": 1.0,
            "dictionary": 1.0,
            "in-place modification": 1.0,
            "array": 1.0,
            "linear search": 1.0,
            "early return for empty list": 1.0,
            "set data structure for uniqueness": 1.0,
            "leveraging set for automatic deduplication": 1.0,
            "set": 1.0
        },
        "data_structures-searching": {
            "binary search": 2.0,
            "early exit upon finding target": 1.0,
            "search narrowing using binary search": 1.0,
            "array": 5.0,
            "linear search": 4.0,
            "divide and conquer": 1.0,
            "pointer manipulation": 1.0,
            "single pass traversal": 1.0,
            "list": 5.0,
            "early exit on match": 1.0
        },
        "algorithms-sorting": {
            "two-pass partitioning": 1.0,
            "separation of concerns": 1.0,
            "two-pass approach": 1.0,
            "list": 5.0,
            "custom sorting": 2.0,
            "stable sort using tuple keys": 1.0,
            "stable sort": 1.0,
            "sorting": 1.0,
            "stable sorting": 1.0,
            "tuple": 1.0,
            "built-in sorting": 1.0,
            "leveraging Python's Timsort": 1.0
        },
        "algorithms-searching": {
            "binary search": 3.0,
            "two-pointer technique": 1.0,
            "array": 5.0,
            "divide and conquer": 1.0,
            "binary search for rotated array": 1.0,
            "linear search": 2.0
        },
        "error_handling-searching": {
            "built-in function usage": 1.0,
            "leveraging built-in string methods": 1.0,
            "string": 3.0,
            "substring search": 1.0,
            "case normalization": 1.0,
            "linear search": 1.0,
            "early return for empty list": 1.0,
            "list": 2.0,
            "linear search using built-in function": 1.0,
            "use of built-in function for efficiency": 1.0,
            "string reversal and comparison": 1.0,
            "slicing for reversal": 1.0
        },
        "recursion-sorting": {
            "two-pointer technique": 1.0,
            "sorting after squaring": 1.0,
            "list": 4.0,
            "recursive sorting": 1.0,
            "divide and conquer": 2.0,
            "recursive merging": 1.0,
            "recursive selection sort": 1.0,
            "recursive approach": 1.0,
            "iterative linear search": 1.0,
            "array": 1.0
        },
        "conditionals-loops-searching": {
            "brute force iteration": 1.0,
            "integer": 1.0,
            "linear search": 1.0,
            "single pass": 1.0,
            "array": 2.0,
            "iteration and conditional check": 1.0,
            "early return if array is empty": 1.0,
            "iteration with conditional checks": 1.0,
            "case-insensitive comparison using lowercase conversion": 1.0,
            "string": 2.0,
            "iteration": 1.0
        },
        "algorithms-data_structures-loops": {
            "hash set for O(1) lookups": 1.0,
            "early termination for non-sequence starts": 1.0,
            "set": 4.0,
            "sorting and greedy": 1.0,
            "sorting to simplify merging": 1.0,
            "single pass merge": 1.0,
            "list": 5.0,
            "sliding window with deque": 1.0,
            "deque for efficient max tracking": 1.0,
            "deque": 2.0,
            "topological sort": 1.0,
            "Kahn's algorithm for topological sorting": 1.0,
            "graph (adjacency list)": 1.0,
            "queue": 1.0,
            "breadth-first search (BFS)": 1.0,
            "early stopping when endWord is found": 1.0,
            "iteration": 1.0,
            "case normalization": 1.0,
            "string": 2.0,
            "slicing": 1.0,
            "use of Python slicing for simplicity and efficiency": 1.0,
            "linear search": 1.0,
            "iterative accumulation": 1.0,
            "use of built-in function": 1.0,
            "iteration with set for uniqueness": 1.0,
            "set for O(1) average time complexity lookups": 1.0,
            "iterative boundary traversal": 1.0,
            "boundary checks to avoid revisiting elements": 1.0,
            "set-based iteration": 1.0,
            "set for O(1) lookups": 1.0,
            "hash map for two-sum complement": 1.0,
            "hash map usage to reduce complexity from O(n^4)": 1.0,
            "hash map": 1.0,
            "sliding window": 1.0,
            "two-pointer technique": 1.0,
            "dictionary": 1.0
        },
        "data_structures-functions-searching": {
            "linear search": 4.0,
            "list": 5.0,
            "early return for empty list": 1.0,
            "iterative summation": 1.0,
            "early return for empty input": 1.0
        },
        "data_structures-functions": {
            "simulation": 1.0,
            "list": 2.0,
            "iterative processing": 1.0,
            "none": 1.0,
            "linked list operations": 1.0,
            "iterative traversal for add operation": 1.0,
            "linked list": 1.0,
            "dictionary operations": 1.0,
            "direct dictionary access": 1.0,
            "dictionary": 1.0,
            "set operations": 1.0,
            "use of set for O(1) average time complexity operations": 1.0,
            "set": 1.0
        },
        "dynamic_programming-functions": {
            "iterative approach": 3.0,
            "iterative calculation to reduce space usage": 1.0,
            "variables": 2.0,
            "dynamic programming": 3.0,
            "array": 2.0,
            "Kadane's algorithm": 1.0,
            "iterative update of current and maximum sums": 1.0,
            "bottom-up approach": 1.0,
            "2D array": 1.0
        },
        "dynamic_programming-searching": {
            "mathematical calculation": 1.0,
            "direct computation using absolute difference": 1.0,
            "combinatorial mathematics": 1.0,
            "use of mathematical formula for combinations": 1.0,
            "dynamic programming": 3.0,
            "iterative approach": 3.0,
            "array": 3.0,
            "state transition": 1.0
        },
        "functions-searching-sorting": {
            "binary search": 1.0,
            "partitioning": 2.0,
            "conditional checks": 1.0,
            "array": 2.0,
            "quickselect": 1.0,
            "in-place swaps": 1.0,
            "sliding window": 1.0,
            "character frequency counting": 1.0,
            "Counter": 1.0,
            "greedy algorithm": 1.0,
            "priority queue (min-heap) for efficient end time management": 1.0,
            "priority queue (min-heap)": 1.0,
            "sorting and binary search": 1.0,
            "binary search via bisect module": 1.0,
            "list": 1.0
        },
        "conditionals-functions-searching-sorting": {
            "sorting": 4.0,
            "set for uniqueness": 1.0,
            "set": 1.0,
            "list": 6.0,
            "hashing": 2.0,
            "sorting for key generation": 2.0,
            "dictionary": 4.0,
            "binary search": 1.0,
            "binary search on smaller array": 1.0,
            "array": 2.0,
            "heap-based approach": 1.0,
            "min-heap to maintain order of elements": 1.0,
            "min-heap": 2.0,
            "brute force with sorting": 1.0,
            "sorting by computed key": 1.0,
            "sorting to simplify maximum product calculation": 1.0,
            "frequency counting and sorting": 1.0,
            "sorting by frequency and index": 1.0,
            "sorting and iterative merging": 1.0,
            "sorting by start time": 1.0,
            "iterative merge": 1.0,
            "sorting and linear search": 1.0,
            "tuple unpacking for sorting": 1.0,
            "tuple": 1.0,
            "frequency counting and heap manipulation": 1.0,
            "heap for efficient frequency extraction": 1.0,
            "Counter": 1.0,
            "heap-based selection": 1.0,
            "use of heap for efficient k-selection": 1.0,
            "heap": 1.0,
            "greedy scheduling": 1.0,
            "conditional checks": 1.0
        },
        "algorithms-loops-sorting": {
            "sorting and median calculation": 1.0,
            "in-place sorting": 1.0,
            "list": 1.0,
            "sorting": 1.0,
            "built-in sort function": 1.0,
            "array": 1.0
        },
        "error_handling-loops-recursion": {
            "recursion": 4.0,
            "none": 2.0,
            "list": 2.0,
            "base case optimization": 1.0,
            "integer": 1.0,
            "dynamic programming": 1.0,
            "iterative approach": 1.0,
            "array storage for memoization": 1.0,
            "string": 2.0,
            "tail recursion": 1.0
        },
        "data_structures-error_handling-loops-recursion": {
            "recursion": 5.0,
            "tail recursion": 2.0,
            "list": 5.0,
            "recursive decomposition": 1.0,
            "recursive traversal": 2.0,
            "filtering non-integers": 1.0
        }
    }
}