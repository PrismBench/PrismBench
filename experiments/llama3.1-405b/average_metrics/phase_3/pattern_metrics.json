{
    "patterns_by_concept_group": {
        "algorithms-recursion": {
            "recursion": 5.0,
            "base case optimization": 1.0,
            "none": 1.0,
            "base case for recursion termination": 1.0,
            "primitive integer": 1.0,
            "divide and conquer": 1.0,
            "string": 2.0,
            "tail recursion optimization is not applied": 1.0
        },
        "data_structures-functions-searching-sorting": {
            "heap-based selection": 2.0,
            "use of min-heap to avoid full sorting": 1.0,
            "heap": 3.0,
            "two heaps (min-heap and max-heap)": 1.0,
            "heap balancing": 1.0,
            "min-heap": 4.0,
            "max-heap": 1.0,
            "sliding window with deque": 2.0,
            "use of deque for efficient max tracking": 1.0,
            "deque": 2.0,
            "min-heap to maintain top k elements": 1.0,
            "hashmap": 3.0,
            "hash set for efficient lookups": 1.0,
            "avoid sorting": 1.0,
            "use set for O(1) lookups": 1.0,
            "set": 3.0,
            "sorting": 2.0,
            "use of built-in sorting": 1.0,
            "array": 2.0,
            "binary search": 1.0,
            "partitioning": 1.0,
            "conditional checks": 1.0,
            "hash set for O(1) lookups": 1.0,
            "set for duplicate removal and fast lookups": 1.0,
            "tree traversal": 1.0,
            "set for uniqueness": 1.0,
            "in-order traversal": 1.0,
            "list": 3.0,
            "sliding window": 2.0,
            "character frequency comparison": 1.0,
            "window size management": 1.0,
            "greedy algorithm": 2.0,
            "frequency counting": 2.0,
            "mathematical calculation for scheduling": 1.0,
            "dictionary": 2.0,
            "priority queue (min-heap)": 2.0,
            "maintaining a fixed-size heap": 2.0,
            "priority queue (min-heap) for efficient merging": 1.0,
            "using a heap to maintain the smallest elements across lists": 1.0,
            "dynamic window resizing": 1.0,
            "frequency counting with heap": 1.0,
            "use of heap for efficient top-k extraction": 1.0,
            "Counter": 1.0,
            "hashmap and stack combination": 1.0,
            "use of defaultdict for automatic key initialization": 1.0,
            "hashmap (defaultdict)": 1.0,
            "deque for efficient max tracking": 1.0,
            "sweep line algorithm": 1.0,
            "sorting intervals": 1.0,
            "tracking current overlap": 1.0
        },
        "error_handling-functions-loops-sorting": {
            "validation and sorting": 4.0,
            "early termination on error detection": 1.0,
            "list": 11.0,
            "early return on validation failure": 3.0,
            "sorting and set usage": 1.0,
            "set for uniqueness": 1.0,
            "set": 1.0,
            "sorting and validation": 1.0,
            "early exit on invalid entry": 1.0,
            "dictionary": 1.0,
            "custom sorting with stability check": 1.0,
            "stable sorting using tuple keys": 1.0,
            "sorting": 1.0,
            "stable sort to maintain order of same-length strings": 1.0,
            "iterative processing with sorting": 1.0,
            "early exit on invalid detection": 1.0,
            "combined sorting by multiple criteria": 1.0,
            "sorting with custom key": 1.0,
            "early validation checks": 1.0,
            "use of datetime for parsing": 1.0,
            "tuple": 2.0,
            "iterative processing with validation": 1.0,
            "early exit on validation failure": 2.0
        },
        "algorithms-data_structures-error_handling-searching": {
            "set-based operations": 1.0,
            "thread safety with locks": 1.0,
            "set": 1.0
        },
        "loops-recursion-searching": {
            "depth-first search (DFS)": 1.0,
            "backtracking": 1.0,
            "set": 1.0
        },
        "conditionals-data_structures-searching-sorting": {
            "min-heap": 2.0,
            "heap to maintain k largest elements": 1.0,
            "quickselect algorithm": 1.0,
            "in-place partitioning": 1.0,
            "recursive divide-and-conquer": 1.0,
            "array": 1.0,
            "frequency counting and sorting": 1.0,
            "use of negative frequency to simulate max heap": 1.0,
            "dictionary": 2.0,
            "list": 2.0,
            "hashing": 1.0,
            "use of sorted strings as hash keys": 1.0,
            "sorting and linear traversal": 1.0,
            "sorting to simplify merging": 1.0,
            "hash set for constant time lookups": 1.0,
            "early termination for non-sequence starters": 1.0,
            "hash set": 1.0
        },
        "algorithms-data_structures-loops-sorting": {
            "priority queue (min-heap)": 2.0,
            "use of heap for efficient minimum extraction": 1.0,
            "min-heap": 4.0,
            "hash map and stack combination": 1.0,
            "hash map for frequency counting": 1.0,
            "stack for maintaining order of elements": 1.0,
            "hashmap": 1.0,
            "stack": 1.0,
            "graph traversal": 1.0,
            "depth-first search (DFS)": 1.0,
            "dictionary": 1.0,
            "set": 2.0,
            "greedy algorithm": 2.0,
            "sorting based on end times": 1.0,
            "iterative selection": 1.0,
            "list": 3.0,
            "dynamic programming": 1.0,
            "tracking min and max products": 1.0,
            "in-place updates": 1.0,
            "array": 4.0,
            "maintaining a fixed-size heap": 1.0,
            "using heapq for efficient minimum extraction": 1.0,
            "linked list": 1.0,
            "set-based iteration": 1.0,
            "set for O(1) lookups": 1.0,
            "only start counting from sequence beginnings": 1.0,
            "brute force with optimization": 1.0,
            "Kadane's algorithm for initial max subarray sum": 1.0,
            "sorting": 3.0,
            "sorting by multiple keys": 1.0,
            "tuple": 1.0,
            "greedy approach": 1.0,
            "median-based optimization": 1.0,
            "sorting to find median": 1.0,
            "merging intervals": 1.0
        },
        "functions-loops-recursion-searching": {
            "binary search with recursion": 1.0,
            "divide and conquer": 2.0,
            "array": 2.0,
            "set-based uniqueness filtering": 1.0,
            "use of set to filter unique elements": 1.0,
            "set": 3.0,
            "recursion": 1.0,
            "tail recursion optimization is not applicable in Python": 1.0,
            "list": 3.0,
            "recursive binary search": 1.0,
            "conditional narrowing of search space": 1.0,
            "recursive backtracking": 2.0,
            "none": 1.0,
            "recursive search": 1.0,
            "early return on success": 1.0,
            "dictionary": 2.0,
            "QuickSelect algorithm": 1.0,
            "in-place partitioning": 1.0,
            "iterative approach to avoid recursion overhead": 1.0,
            "recursive backtracking with memoization": 1.0,
            "memoization": 1.0,
            "early termination": 1.0,
            "visited set to avoid revisiting cells": 1.0,
            "bit manipulation": 1.0,
            "bitmasking to check for common letters": 1.0,
            "bitmask (integer)": 1.0,
            "backtracking with trie": 1.0,
            "trie data structure for efficient word lookup": 1.0,
            "early termination using trie nodes": 1.0,
            "trie": 1.0
        },
        "data_structures-dynamic_programming-functions-searching": {
            "binary search with dynamic programming": 1.0,
            "binary search for efficient insertion": 1.0,
            "greedy approach for subsequence maintenance": 1.0,
            "list": 2.0,
            "dynamic programming": 6.0,
            "early termination": 1.0,
            "array": 6.0,
            "sliding window": 1.0,
            "two-pointer technique": 1.0,
            "greedy approach": 1.0,
            "early termination when target is reached": 1.0,
            "bottom-up approach": 1.0,
            "2D array": 4.0,
            "prefix sum with hashmap": 1.0,
            "prefix sum": 1.0,
            "hashmap for quick lookup": 1.0,
            "hashmap": 1.0,
            "greedy algorithm": 1.0,
            "sorting to facilitate unique element determination": 1.0,
            "topological sorting with dynamic programming": 1.0,
            "topological order traversal": 1.0,
            "dynamic programming for path length calculation": 1.0,
            "adjacency list": 1.0,
            "queue": 1.0,
            "Kruskal's algorithm for Minimum Spanning Tree (MST)": 1.0,
            "sorting edges by cost": 1.0,
            "union-find for cycle detection": 1.0,
            "tuple": 1.0,
            "brute force with prefix sums": 1.0,
            "prefix sum for subarray sum calculation": 1.0,
            "backtracking with memoization": 1.0,
            "memoization": 1.0,
            "recursive backtracking": 1.0,
            "set": 1.0,
            "dictionary": 1.0,
            "state management": 1.0,
            "in-place updates": 1.0,
            "prefix sum for range sum calculation": 1.0,
            "state transition using DP": 1.0,
            "precomputation of palindromic substrings": 1.0,
            "bottom-up dynamic programming": 1.0,
            "use of a 2D DP table to store intermediate results": 1.0
        },
        "conditionals-data_structures-searching": {
            "breadth-first search (BFS)": 1.0,
            "early exit when treasure is found": 1.0,
            "deque": 1.0,
            "set": 1.0
        },
        "algorithms-dynamic_programming-recursion-searching": {
            "dynamic programming": 5.0,
            "iterative approach": 3.0,
            "bottom-up calculation": 1.0,
            "array": 3.0,
            "tabulation": 2.0,
            "in-place modification": 1.0,
            "2D array": 2.0,
            "in-place updates": 1.0
        },
        "algorithms-searching-sorting": {
            "sorting": 3.0,
            "sorting based on computed distance": 1.0,
            "list": 3.0,
            "set": 2.0,
            "binary search": 1.0,
            "partitioning": 1.0,
            "binary search on smaller array": 1.0,
            "array": 1.0,
            "sweep line algorithm": 1.0,
            "event-based processing": 1.0,
            "hash set for O(1) lookups": 1.0,
            "use of set to eliminate duplicates and allow fast lookups": 1.0
        },
        "algorithms-dynamic_programming-error_handling-loops": {
            "dynamic programming": 11.0,
            "iterative approach": 4.0,
            "array": 6.0,
            "tracking min and max products": 1.0,
            "tabulation": 1.0,
            "2D array": 4.0,
            "early exit for invalid inputs": 1.0,
            "grid traversal": 1.0,
            "in-place updates": 1.0,
            "tracking max and min products to handle negative numbers": 1.0,
            "variables": 1.0,
            "bottom-up approach": 1.0,
            "early termination when limit exceeded": 1.0,
            "early termination": 1.0,
            "modified Kadane's algorithm": 1.0,
            "early termination on error codes": 1.0,
            "resetting current sum": 1.0,
            "stack-based approach": 1.0,
            "single pass traversal": 1.0,
            "stack": 1.0,
            "sliding window": 1.0,
            "dynamic adjustment of window size": 1.0,
            "dictionary": 1.0,
            "resetting subsequence on error code": 1.0,
            "list": 1.0
        },
        "conditionals-data_structures-error_handling-searching": {
            "linear search with validation": 1.0,
            "early exit on find": 1.0,
            "list": 2.0,
            "dictionary": 3.0,
            "hash table lookup": 1.0,
            "preprocessing catalog into a hash table for efficient lookup": 1.0,
            "recursive search": 1.0,
            "early return on match": 1.0,
            "recursive traversal": 1.0
        },
        "conditionals-data_structures-dynamic_programming-sorting": {
            "greedy scheduling": 1.0,
            "frequency counting": 1.0,
            "mathematical formula for idle slots": 1.0,
            "dictionary": 1.0,
            "dynamic programming": 1.0,
            "sorting": 1.0,
            "iterative comparison": 1.0,
            "list": 2.0,
            "brute force with set for uniqueness": 1.0,
            "set for uniqueness": 1.0,
            "set": 1.0,
            "dynamic programming with binary search": 1.0,
            "binary search for efficient replacement": 1.0
        },
        "algorithms-error_handling-searching-sorting": {
            "binary search with error handling": 1.0,
            "two-pointer technique": 2.0,
            "midpoint adjustment": 1.0,
            "array": 2.0,
            "filtering and indexing": 1.0,
            "early termination": 3.0,
            "preserving order while removing duplicates": 1.0,
            "list": 3.0,
            "skip duplicates": 1.0,
            "sliding window": 2.0,
            "early exit for invalid values": 1.0,
            "frequency map for counting": 1.0,
            "dictionary": 2.0,
            "frequency map for duplicate tracking": 1.0,
            "modified binary search": 1.0,
            "divide and conquer": 1.0,
            "recursive approach": 1.0,
            "heap data structure": 1.0,
            "min-heap to maintain k largest elements": 1.0,
            "set": 1.0,
            "min-heap": 1.0,
            "sorting and merging": 1.0,
            "sorting intervals": 1.0,
            "iterative merging": 1.0
        },
        "data_structures-error_handling-recursion-sorting": {
            "recursive merge sort": 1.0,
            "divide and conquer": 2.0,
            "recursion": 1.0,
            "list": 3.0,
            "recursive quick sort": 1.0,
            "in-place partitioning": 1.0,
            "recursive heap sort": 1.0,
            "in-place sorting": 1.0,
            "array": 1.0,
            "recursive bucket sort": 1.0,
            "recursive approach": 1.0,
            "bucket distribution based on range": 1.0
        }
    },
    "patterns_by_difficulty": {
        "very easy": {
            "recursion": 5.0,
            "base case optimization": 1.0,
            "none": 1.0,
            "base case for recursion termination": 1.0,
            "primitive integer": 1.0,
            "divide and conquer": 1.0,
            "string": 2.0,
            "tail recursion optimization is not applied": 1.0,
            "dynamic programming": 5.0,
            "iterative approach": 3.0,
            "bottom-up calculation": 1.0,
            "array": 3.0,
            "tabulation": 2.0,
            "in-place modification": 1.0,
            "2D array": 2.0,
            "in-place updates": 1.0
        },
        "very hard": {
            "heap-based selection": 2.0,
            "use of min-heap to avoid full sorting": 1.0,
            "heap": 3.0,
            "two heaps (min-heap and max-heap)": 1.0,
            "heap balancing": 1.0,
            "min-heap": 2.6666666666666665,
            "max-heap": 1.0,
            "sliding window with deque": 2.0,
            "use of deque for efficient max tracking": 1.0,
            "deque": 2.0,
            "min-heap to maintain top k elements": 1.0,
            "hashmap": 2.0,
            "hash set for efficient lookups": 1.0,
            "avoid sorting": 1.0,
            "use set for O(1) lookups": 1.0,
            "set": 4.0,
            "sorting": 3.0,
            "use of built-in sorting": 1.0,
            "array": 6.0,
            "binary search": 1.0,
            "partitioning": 1.0,
            "conditional checks": 1.0,
            "hash set for O(1) lookups": 1.0,
            "set for duplicate removal and fast lookups": 1.0,
            "tree traversal": 1.0,
            "set for uniqueness": 2.0,
            "in-order traversal": 1.0,
            "list": 8.333333333333334,
            "sliding window": 2.5,
            "character frequency comparison": 1.0,
            "window size management": 1.0,
            "greedy algorithm": 2.5,
            "frequency counting": 2.0,
            "mathematical calculation for scheduling": 1.0,
            "dictionary": 2.6666666666666665,
            "priority queue (min-heap)": 1.5,
            "maintaining a fixed-size heap": 1.5,
            "priority queue (min-heap) for efficient merging": 1.0,
            "using a heap to maintain the smallest elements across lists": 1.0,
            "dynamic window resizing": 1.0,
            "frequency counting with heap": 1.0,
            "use of heap for efficient top-k extraction": 1.0,
            "Counter": 1.0,
            "hashmap and stack combination": 1.0,
            "use of defaultdict for automatic key initialization": 1.0,
            "hashmap (defaultdict)": 1.0,
            "deque for efficient max tracking": 1.0,
            "sweep line algorithm": 1.0,
            "sorting intervals": 1.0,
            "tracking current overlap": 1.0,
            "validation and sorting": 4.0,
            "early termination on error detection": 1.0,
            "early return on validation failure": 3.0,
            "sorting and set usage": 1.0,
            "sorting and validation": 1.0,
            "early exit on invalid entry": 1.0,
            "custom sorting with stability check": 1.0,
            "stable sorting using tuple keys": 1.0,
            "stable sort to maintain order of same-length strings": 1.0,
            "iterative processing with sorting": 1.0,
            "early exit on invalid detection": 1.0,
            "combined sorting by multiple criteria": 1.0,
            "sorting with custom key": 1.0,
            "early validation checks": 1.0,
            "use of datetime for parsing": 1.0,
            "tuple": 2.0,
            "iterative processing with validation": 1.0,
            "early exit on validation failure": 2.0,
            "set-based operations": 1.0,
            "thread safety with locks": 1.0,
            "depth-first search (DFS)": 1.0,
            "backtracking": 1.0,
            "graph traversal": 1.0,
            "sorting based on end times": 1.0,
            "iterative selection": 1.0,
            "dynamic programming": 8.0,
            "tracking min and max products": 1.0,
            "in-place updates": 1.5,
            "using heapq for efficient minimum extraction": 1.0,
            "linked list": 1.0,
            "set-based iteration": 1.0,
            "set for O(1) lookups": 1.0,
            "only start counting from sequence beginnings": 1.0,
            "brute force with optimization": 1.0,
            "Kadane's algorithm for initial max subarray sum": 1.0,
            "sorting by multiple keys": 1.0,
            "greedy approach": 1.0,
            "median-based optimization": 1.0,
            "sorting to find median": 1.0,
            "merging intervals": 1.0,
            "prefix sum with hashmap": 1.0,
            "prefix sum": 1.0,
            "hashmap for quick lookup": 1.0,
            "sorting to facilitate unique element determination": 1.0,
            "topological sorting with dynamic programming": 1.0,
            "topological order traversal": 1.0,
            "dynamic programming for path length calculation": 1.0,
            "adjacency list": 1.0,
            "queue": 1.0,
            "Kruskal's algorithm for Minimum Spanning Tree (MST)": 1.0,
            "sorting edges by cost": 1.0,
            "union-find for cycle detection": 1.0,
            "brute force with prefix sums": 1.0,
            "prefix sum for subarray sum calculation": 1.0,
            "backtracking with memoization": 1.0,
            "memoization": 1.0,
            "recursive backtracking": 1.0,
            "state management": 1.0,
            "prefix sum for range sum calculation": 1.0,
            "state transition using DP": 1.0,
            "2D array": 3.5,
            "precomputation of palindromic substrings": 1.0,
            "bottom-up dynamic programming": 1.0,
            "use of a 2D DP table to store intermediate results": 1.0,
            "sorting based on computed distance": 1.0,
            "binary search on smaller array": 1.0,
            "event-based processing": 1.0,
            "use of set to eliminate duplicates and allow fast lookups": 1.0,
            "iterative approach": 4.0,
            "tabulation": 1.0,
            "early exit for invalid inputs": 1.0,
            "grid traversal": 1.0,
            "tracking max and min products to handle negative numbers": 1.0,
            "variables": 1.0,
            "bottom-up approach": 1.0,
            "early termination when limit exceeded": 1.0,
            "early termination": 4.0,
            "modified Kadane's algorithm": 1.0,
            "early termination on error codes": 1.0,
            "resetting current sum": 1.0,
            "stack-based approach": 1.0,
            "single pass traversal": 1.0,
            "stack": 1.0,
            "dynamic adjustment of window size": 1.0,
            "resetting subsequence on error code": 1.0,
            "binary search with error handling": 1.0,
            "two-pointer technique": 2.0,
            "midpoint adjustment": 1.0,
            "filtering and indexing": 1.0,
            "preserving order while removing duplicates": 1.0,
            "skip duplicates": 1.0,
            "early exit for invalid values": 1.0,
            "frequency map for counting": 1.0,
            "frequency map for duplicate tracking": 1.0,
            "modified binary search": 1.0,
            "divide and conquer": 1.0,
            "recursive approach": 1.0,
            "heap data structure": 1.0,
            "min-heap to maintain k largest elements": 1.0,
            "sorting and merging": 1.0,
            "iterative merging": 1.0
        },
        "medium": {
            "min-heap": 2.0,
            "heap to maintain k largest elements": 1.0,
            "binary search with recursion": 1.0,
            "divide and conquer": 2.0,
            "array": 2.0,
            "set-based uniqueness filtering": 1.0,
            "use of set to filter unique elements": 1.0,
            "set": 1.0,
            "recursion": 1.0,
            "tail recursion optimization is not applicable in Python": 1.0,
            "list": 2.5,
            "recursive binary search": 1.0,
            "conditional narrowing of search space": 1.0,
            "recursive backtracking": 1.0,
            "none": 1.0,
            "linear search with validation": 1.0,
            "early exit on find": 1.0,
            "dictionary": 2.0,
            "greedy scheduling": 1.0,
            "frequency counting": 1.0,
            "mathematical formula for idle slots": 1.0,
            "dynamic programming": 1.0,
            "sorting": 1.0,
            "iterative comparison": 1.0,
            "brute force with set for uniqueness": 1.0,
            "set for uniqueness": 1.0,
            "dynamic programming with binary search": 1.0,
            "binary search for efficient replacement": 1.0
        },
        "hard": {
            "priority queue (min-heap)": 1.0,
            "use of heap for efficient minimum extraction": 1.0,
            "min-heap": 1.0,
            "hash map and stack combination": 1.0,
            "hash map for frequency counting": 1.0,
            "stack for maintaining order of elements": 1.0,
            "hashmap": 1.0,
            "stack": 1.0,
            "recursive search": 1.0,
            "early return on success": 1.0,
            "dictionary": 3.0,
            "QuickSelect algorithm": 1.0,
            "in-place partitioning": 1.5,
            "iterative approach to avoid recursion overhead": 1.0,
            "list": 4.0,
            "recursive backtracking with memoization": 1.0,
            "memoization": 1.0,
            "recursive backtracking": 1.0,
            "early termination": 2.0,
            "visited set to avoid revisiting cells": 1.0,
            "set": 3.0,
            "bit manipulation": 1.0,
            "bitmasking to check for common letters": 1.0,
            "bitmask (integer)": 1.0,
            "backtracking with trie": 1.0,
            "trie data structure for efficient word lookup": 1.0,
            "early termination using trie nodes": 1.0,
            "trie": 1.0,
            "binary search with dynamic programming": 1.0,
            "binary search for efficient insertion": 1.0,
            "greedy approach for subsequence maintenance": 1.0,
            "dynamic programming": 2.0,
            "array": 2.5,
            "sliding window": 1.0,
            "two-pointer technique": 1.0,
            "greedy approach": 1.0,
            "early termination when target is reached": 1.0,
            "bottom-up approach": 1.0,
            "2D array": 1.0,
            "breadth-first search (BFS)": 1.0,
            "early exit when treasure is found": 1.0,
            "deque": 1.0,
            "quickselect algorithm": 1.0,
            "recursive divide-and-conquer": 1.0,
            "frequency counting and sorting": 1.0,
            "use of negative frequency to simulate max heap": 1.0,
            "hashing": 1.0,
            "use of sorted strings as hash keys": 1.0,
            "sorting and linear traversal": 1.0,
            "sorting to simplify merging": 1.0,
            "hash set for constant time lookups": 1.0,
            "early termination for non-sequence starters": 1.0,
            "hash set": 1.0,
            "hash table lookup": 1.0,
            "preprocessing catalog into a hash table for efficient lookup": 1.0,
            "early return on match": 1.0,
            "recursive traversal": 1.0,
            "recursive merge sort": 1.0,
            "divide and conquer": 2.0,
            "recursion": 1.0,
            "recursive quick sort": 1.0,
            "recursive heap sort": 1.0,
            "in-place sorting": 1.0,
            "recursive bucket sort": 1.0,
            "recursive approach": 1.0,
            "bucket distribution based on range": 1.0
        }
    },
    "total_patterns": {
        "recursion": 2.3333333333333335,
        "base case optimization": 1.0,
        "none": 1.0,
        "base case for recursion termination": 1.0,
        "primitive integer": 1.0,
        "divide and conquer": 2.0,
        "string": 2.0,
        "tail recursion optimization is not applied": 1.0,
        "heap-based selection": 2.0,
        "use of min-heap to avoid full sorting": 1.0,
        "heap": 3.0,
        "two heaps (min-heap and max-heap)": 1.0,
        "heap balancing": 1.0,
        "min-heap": 3.6666666666666665,
        "max-heap": 1.0,
        "sliding window with deque": 2.0,
        "use of deque for efficient max tracking": 1.0,
        "deque": 1.5,
        "min-heap to maintain top k elements": 1.0,
        "hashmap": 2.5,
        "hash set for efficient lookups": 1.0,
        "avoid sorting": 1.0,
        "use set for O(1) lookups": 1.0,
        "set": 5.666666666666667,
        "sorting": 3.3333333333333335,
        "use of built-in sorting": 1.0,
        "array": 9.333333333333334,
        "binary search": 1.0,
        "partitioning": 1.0,
        "conditional checks": 1.0,
        "hash set for O(1) lookups": 1.0,
        "set for duplicate removal and fast lookups": 1.0,
        "tree traversal": 1.0,
        "set for uniqueness": 1.5,
        "in-order traversal": 1.0,
        "list": 12.666666666666666,
        "sliding window": 2.0,
        "character frequency comparison": 1.0,
        "window size management": 1.0,
        "greedy algorithm": 2.5,
        "frequency counting": 1.5,
        "mathematical calculation for scheduling": 1.0,
        "dictionary": 5.333333333333333,
        "priority queue (min-heap)": 2.0,
        "maintaining a fixed-size heap": 1.5,
        "priority queue (min-heap) for efficient merging": 1.0,
        "using a heap to maintain the smallest elements across lists": 1.0,
        "dynamic window resizing": 1.0,
        "frequency counting with heap": 1.0,
        "use of heap for efficient top-k extraction": 1.0,
        "Counter": 1.0,
        "hashmap and stack combination": 1.0,
        "use of defaultdict for automatic key initialization": 1.0,
        "hashmap (defaultdict)": 1.0,
        "deque for efficient max tracking": 1.0,
        "sweep line algorithm": 1.0,
        "sorting intervals": 1.0,
        "tracking current overlap": 1.0,
        "validation and sorting": 4.0,
        "early termination on error detection": 1.0,
        "early return on validation failure": 3.0,
        "sorting and set usage": 1.0,
        "sorting and validation": 1.0,
        "early exit on invalid entry": 1.0,
        "custom sorting with stability check": 1.0,
        "stable sorting using tuple keys": 1.0,
        "stable sort to maintain order of same-length strings": 1.0,
        "iterative processing with sorting": 1.0,
        "early exit on invalid detection": 1.0,
        "combined sorting by multiple criteria": 1.0,
        "sorting with custom key": 1.0,
        "early validation checks": 1.0,
        "use of datetime for parsing": 1.0,
        "tuple": 2.0,
        "iterative processing with validation": 1.0,
        "early exit on validation failure": 2.0,
        "set-based operations": 1.0,
        "thread safety with locks": 1.0,
        "depth-first search (DFS)": 1.0,
        "backtracking": 1.0,
        "heap to maintain k largest elements": 1.0,
        "use of heap for efficient minimum extraction": 1.0,
        "hash map and stack combination": 1.0,
        "hash map for frequency counting": 1.0,
        "stack for maintaining order of elements": 1.0,
        "stack": 1.0,
        "binary search with recursion": 1.0,
        "set-based uniqueness filtering": 1.0,
        "use of set to filter unique elements": 1.0,
        "tail recursion optimization is not applicable in Python": 1.0,
        "recursive binary search": 1.0,
        "conditional narrowing of search space": 1.0,
        "recursive backtracking": 3.0,
        "recursive search": 1.0,
        "early return on success": 1.0,
        "QuickSelect algorithm": 1.0,
        "in-place partitioning": 1.5,
        "iterative approach to avoid recursion overhead": 1.0,
        "recursive backtracking with memoization": 1.0,
        "memoization": 2.0,
        "early termination": 3.0,
        "visited set to avoid revisiting cells": 1.0,
        "bit manipulation": 1.0,
        "bitmasking to check for common letters": 1.0,
        "bitmask (integer)": 1.0,
        "backtracking with trie": 1.0,
        "trie data structure for efficient word lookup": 1.0,
        "early termination using trie nodes": 1.0,
        "trie": 1.0,
        "graph traversal": 1.0,
        "sorting based on end times": 1.0,
        "iterative selection": 1.0,
        "dynamic programming": 12.0,
        "tracking min and max products": 1.0,
        "in-place updates": 2.0,
        "using heapq for efficient minimum extraction": 1.0,
        "linked list": 1.0,
        "set-based iteration": 1.0,
        "set for O(1) lookups": 1.0,
        "only start counting from sequence beginnings": 1.0,
        "brute force with optimization": 1.0,
        "Kadane's algorithm for initial max subarray sum": 1.0,
        "sorting by multiple keys": 1.0,
        "greedy approach": 2.0,
        "median-based optimization": 1.0,
        "sorting to find median": 1.0,
        "merging intervals": 1.0,
        "binary search with dynamic programming": 1.0,
        "binary search for efficient insertion": 1.0,
        "greedy approach for subsequence maintenance": 1.0,
        "two-pointer technique": 1.5,
        "early termination when target is reached": 1.0,
        "bottom-up approach": 1.0,
        "2D array": 5.0,
        "prefix sum with hashmap": 1.0,
        "prefix sum": 1.0,
        "hashmap for quick lookup": 1.0,
        "sorting to facilitate unique element determination": 1.0,
        "topological sorting with dynamic programming": 1.0,
        "topological order traversal": 1.0,
        "dynamic programming for path length calculation": 1.0,
        "adjacency list": 1.0,
        "queue": 1.0,
        "Kruskal's algorithm for Minimum Spanning Tree (MST)": 1.0,
        "sorting edges by cost": 1.0,
        "union-find for cycle detection": 1.0,
        "brute force with prefix sums": 1.0,
        "prefix sum for subarray sum calculation": 1.0,
        "backtracking with memoization": 1.0,
        "state management": 1.0,
        "prefix sum for range sum calculation": 1.0,
        "state transition using DP": 1.0,
        "precomputation of palindromic substrings": 1.0,
        "bottom-up dynamic programming": 1.0,
        "use of a 2D DP table to store intermediate results": 1.0,
        "breadth-first search (BFS)": 1.0,
        "early exit when treasure is found": 1.0,
        "iterative approach": 3.5,
        "bottom-up calculation": 1.0,
        "tabulation": 1.5,
        "in-place modification": 1.0,
        "quickselect algorithm": 1.0,
        "recursive divide-and-conquer": 1.0,
        "frequency counting and sorting": 1.0,
        "use of negative frequency to simulate max heap": 1.0,
        "hashing": 1.0,
        "use of sorted strings as hash keys": 1.0,
        "sorting and linear traversal": 1.0,
        "sorting to simplify merging": 1.0,
        "hash set for constant time lookups": 1.0,
        "early termination for non-sequence starters": 1.0,
        "hash set": 1.0,
        "sorting based on computed distance": 1.0,
        "binary search on smaller array": 1.0,
        "event-based processing": 1.0,
        "use of set to eliminate duplicates and allow fast lookups": 1.0,
        "early exit for invalid inputs": 1.0,
        "grid traversal": 1.0,
        "tracking max and min products to handle negative numbers": 1.0,
        "variables": 1.0,
        "early termination when limit exceeded": 1.0,
        "modified Kadane's algorithm": 1.0,
        "early termination on error codes": 1.0,
        "resetting current sum": 1.0,
        "stack-based approach": 1.0,
        "single pass traversal": 1.0,
        "dynamic adjustment of window size": 1.0,
        "resetting subsequence on error code": 1.0,
        "linear search with validation": 1.0,
        "early exit on find": 1.0,
        "hash table lookup": 1.0,
        "preprocessing catalog into a hash table for efficient lookup": 1.0,
        "early return on match": 1.0,
        "recursive traversal": 1.0,
        "greedy scheduling": 1.0,
        "mathematical formula for idle slots": 1.0,
        "iterative comparison": 1.0,
        "brute force with set for uniqueness": 1.0,
        "dynamic programming with binary search": 1.0,
        "binary search for efficient replacement": 1.0,
        "binary search with error handling": 1.0,
        "midpoint adjustment": 1.0,
        "filtering and indexing": 1.0,
        "preserving order while removing duplicates": 1.0,
        "skip duplicates": 1.0,
        "early exit for invalid values": 1.0,
        "frequency map for counting": 1.0,
        "frequency map for duplicate tracking": 1.0,
        "modified binary search": 1.0,
        "recursive approach": 2.0,
        "heap data structure": 1.0,
        "min-heap to maintain k largest elements": 1.0,
        "sorting and merging": 1.0,
        "iterative merging": 1.0,
        "recursive merge sort": 1.0,
        "recursive quick sort": 1.0,
        "recursive heap sort": 1.0,
        "in-place sorting": 1.0,
        "recursive bucket sort": 1.0,
        "bucket distribution based on range": 1.0
    },
    "comparative_analysis": {
        "algorithms-recursion-very easy": {
            "success_rate": 0.8,
            "avg_attempts": 3.0,
            "patterns": {
                "recursion": 5.0,
                "base case optimization": 1.0,
                "none": 1.0,
                "base case for recursion termination": 1.0,
                "primitive integer": 1.0,
                "divide and conquer": 1.0,
                "string": 2.0,
                "tail recursion optimization is not applied": 1.0
            },
            "pattern_distribution": {
                "algorithmic_patterns": 0.0,
                "data_structure_patterns": 0.0,
                "optimization_patterns": 2.0,
                "implementation_patterns": 0.0
            }
        },
        "data_structures-functions-searching-sorting-very hard": {
            "success_rate": 0.45,
            "avg_attempts": 3.0,
            "patterns": {
                "heap-based selection": 2.0,
                "use of min-heap to avoid full sorting": 1.0,
                "heap": 3.0,
                "two heaps (min-heap and max-heap)": 1.0,
                "heap balancing": 1.0,
                "min-heap": 4.0,
                "max-heap": 1.0,
                "sliding window with deque": 2.0,
                "use of deque for efficient max tracking": 1.0,
                "deque": 2.0,
                "min-heap to maintain top k elements": 1.0,
                "hashmap": 3.0,
                "hash set for efficient lookups": 1.0,
                "avoid sorting": 1.0,
                "use set for O(1) lookups": 1.0,
                "set": 3.0,
                "sorting": 2.0,
                "use of built-in sorting": 1.0,
                "array": 2.0,
                "binary search": 1.0,
                "partitioning": 1.0,
                "conditional checks": 1.0,
                "hash set for O(1) lookups": 1.0,
                "set for duplicate removal and fast lookups": 1.0,
                "tree traversal": 1.0,
                "set for uniqueness": 1.0,
                "in-order traversal": 1.0,
                "list": 3.0,
                "sliding window": 2.0,
                "character frequency comparison": 1.0,
                "window size management": 1.0,
                "greedy algorithm": 2.0,
                "frequency counting": 2.0,
                "mathematical calculation for scheduling": 1.0,
                "dictionary": 2.0,
                "priority queue (min-heap)": 2.0,
                "maintaining a fixed-size heap": 2.0,
                "priority queue (min-heap) for efficient merging": 1.0,
                "using a heap to maintain the smallest elements across lists": 1.0,
                "dynamic window resizing": 1.0,
                "frequency counting with heap": 1.0,
                "use of heap for efficient top-k extraction": 1.0,
                "Counter": 1.0,
                "hashmap and stack combination": 1.0,
                "use of defaultdict for automatic key initialization": 1.0,
                "hashmap (defaultdict)": 1.0,
                "deque for efficient max tracking": 1.0,
                "sweep line algorithm": 1.0,
                "sorting intervals": 1.0,
                "tracking current overlap": 1.0
            },
            "pattern_distribution": {
                "algorithmic_patterns": 2.0,
                "data_structure_patterns": 0.0,
                "optimization_patterns": 0.0,
                "implementation_patterns": 0.0
            }
        },
        "error_handling-functions-loops-sorting-very hard": {
            "success_rate": 0.5333333333333333,
            "avg_attempts": 3.0,
            "patterns": {
                "validation and sorting": 4.0,
                "early termination on error detection": 1.0,
                "list": 11.0,
                "early return on validation failure": 3.0,
                "sorting and set usage": 1.0,
                "set for uniqueness": 1.0,
                "set": 1.0,
                "sorting and validation": 1.0,
                "early exit on invalid entry": 1.0,
                "dictionary": 1.0,
                "custom sorting with stability check": 1.0,
                "stable sorting using tuple keys": 1.0,
                "sorting": 1.0,
                "stable sort to maintain order of same-length strings": 1.0,
                "iterative processing with sorting": 1.0,
                "early exit on invalid detection": 1.0,
                "combined sorting by multiple criteria": 1.0,
                "sorting with custom key": 1.0,
                "early validation checks": 1.0,
                "use of datetime for parsing": 1.0,
                "tuple": 2.0,
                "iterative processing with validation": 1.0,
                "early exit on validation failure": 2.0
            },
            "pattern_distribution": {
                "algorithmic_patterns": 0.0,
                "data_structure_patterns": 0.0,
                "optimization_patterns": 0.0,
                "implementation_patterns": 0.0
            }
        },
        "algorithms-data_structures-error_handling-searching-very hard": {
            "success_rate": 0.0,
            "avg_attempts": 3.0,
            "patterns": {
                "set-based operations": 1.0,
                "thread safety with locks": 1.0,
                "set": 1.0
            },
            "pattern_distribution": {
                "algorithmic_patterns": 0.0,
                "data_structure_patterns": 0.0,
                "optimization_patterns": 0.0,
                "implementation_patterns": 0.0
            }
        },
        "loops-recursion-searching-very hard": {
            "success_rate": 0.0,
            "avg_attempts": 3.0,
            "patterns": {
                "depth-first search (DFS)": 1.0,
                "backtracking": 1.0,
                "set": 1.0
            },
            "pattern_distribution": {
                "algorithmic_patterns": 0.0,
                "data_structure_patterns": 0.0,
                "optimization_patterns": 0.0,
                "implementation_patterns": 0.0
            }
        },
        "conditionals-data_structures-searching-sorting-medium": {
            "success_rate": 0.0,
            "avg_attempts": 3.0,
            "patterns": {
                "min-heap": 2.0,
                "heap to maintain k largest elements": 1.0
            },
            "pattern_distribution": {
                "algorithmic_patterns": 0.0,
                "data_structure_patterns": 0.0,
                "optimization_patterns": 0.0,
                "implementation_patterns": 0.0
            }
        },
        "algorithms-data_structures-loops-sorting-hard": {
            "success_rate": 0.0,
            "avg_attempts": 3.0,
            "patterns": {
                "priority queue (min-heap)": 1.0,
                "use of heap for efficient minimum extraction": 1.0,
                "min-heap": 1.0,
                "hash map and stack combination": 1.0,
                "hash map for frequency counting": 1.0,
                "stack for maintaining order of elements": 1.0,
                "hashmap": 1.0,
                "stack": 1.0
            },
            "pattern_distribution": {
                "algorithmic_patterns": 0.0,
                "data_structure_patterns": 0.0,
                "optimization_patterns": 0.0,
                "implementation_patterns": 0.0
            }
        },
        "functions-loops-recursion-searching-medium": {
            "success_rate": 0.6,
            "avg_attempts": 3.0,
            "patterns": {
                "binary search with recursion": 1.0,
                "divide and conquer": 2.0,
                "array": 2.0,
                "set-based uniqueness filtering": 1.0,
                "use of set to filter unique elements": 1.0,
                "set": 1.0,
                "recursion": 1.0,
                "tail recursion optimization is not applicable in Python": 1.0,
                "list": 2.0,
                "recursive binary search": 1.0,
                "conditional narrowing of search space": 1.0,
                "recursive backtracking": 1.0,
                "none": 1.0
            },
            "pattern_distribution": {
                "algorithmic_patterns": 0.0,
                "data_structure_patterns": 0.0,
                "optimization_patterns": 1.0,
                "implementation_patterns": 0.0
            }
        },
        "functions-loops-recursion-searching-hard": {
            "success_rate": 0.3,
            "avg_attempts": 3.0,
            "patterns": {
                "recursive search": 1.0,
                "early return on success": 1.0,
                "dictionary": 2.0,
                "QuickSelect algorithm": 1.0,
                "in-place partitioning": 1.0,
                "iterative approach to avoid recursion overhead": 1.0,
                "list": 1.0,
                "recursive backtracking with memoization": 1.0,
                "memoization": 1.0,
                "recursive backtracking": 1.0,
                "early termination": 1.0,
                "visited set to avoid revisiting cells": 1.0,
                "set": 2.0,
                "bit manipulation": 1.0,
                "bitmasking to check for common letters": 1.0,
                "bitmask (integer)": 1.0,
                "backtracking with trie": 1.0,
                "trie data structure for efficient word lookup": 1.0,
                "early termination using trie nodes": 1.0,
                "trie": 1.0
            },
            "pattern_distribution": {
                "algorithmic_patterns": 1.0,
                "data_structure_patterns": 1.0,
                "optimization_patterns": 0.0,
                "implementation_patterns": 0.0
            }
        },
        "algorithms-data_structures-loops-sorting-very hard": {
            "success_rate": 0.13333333333333333,
            "avg_attempts": 3.0,
            "patterns": {
                "graph traversal": 1.0,
                "depth-first search (DFS)": 1.0,
                "dictionary": 1.0,
                "set": 2.0,
                "greedy algorithm": 2.0,
                "sorting based on end times": 1.0,
                "iterative selection": 1.0,
                "list": 3.0,
                "dynamic programming": 1.0,
                "tracking min and max products": 1.0,
                "in-place updates": 1.0,
                "array": 4.0,
                "min-heap": 3.0,
                "maintaining a fixed-size heap": 1.0,
                "priority queue (min-heap)": 1.0,
                "using heapq for efficient minimum extraction": 1.0,
                "linked list": 1.0,
                "set-based iteration": 1.0,
                "set for O(1) lookups": 1.0,
                "only start counting from sequence beginnings": 1.0,
                "brute force with optimization": 1.0,
                "Kadane's algorithm for initial max subarray sum": 1.0,
                "sorting": 3.0,
                "sorting by multiple keys": 1.0,
                "tuple": 1.0,
                "greedy approach": 1.0,
                "median-based optimization": 1.0,
                "sorting to find median": 1.0,
                "merging intervals": 1.0
            },
            "pattern_distribution": {
                "algorithmic_patterns": 2.0,
                "data_structure_patterns": 0.0,
                "optimization_patterns": 2.0,
                "implementation_patterns": 0.0
            }
        },
        "data_structures-dynamic_programming-functions-searching-hard": {
            "success_rate": 0.2,
            "avg_attempts": 3.0,
            "patterns": {
                "binary search with dynamic programming": 1.0,
                "binary search for efficient insertion": 1.0,
                "greedy approach for subsequence maintenance": 1.0,
                "list": 1.0,
                "dynamic programming": 2.0,
                "early termination": 1.0,
                "array": 3.0,
                "sliding window": 1.0,
                "two-pointer technique": 1.0,
                "greedy approach": 1.0,
                "early termination when target is reached": 1.0,
                "bottom-up approach": 1.0,
                "2D array": 1.0
            },
            "pattern_distribution": {
                "algorithmic_patterns": 0.0,
                "data_structure_patterns": 0.0,
                "optimization_patterns": 0.0,
                "implementation_patterns": 0.0
            }
        },
        "data_structures-dynamic_programming-functions-searching-very hard": {
            "success_rate": 0.1,
            "avg_attempts": 3.0,
            "patterns": {
                "prefix sum with hashmap": 1.0,
                "prefix sum": 1.0,
                "hashmap for quick lookup": 1.0,
                "hashmap": 1.0,
                "greedy algorithm": 1.0,
                "sorting to facilitate unique element determination": 1.0,
                "array": 3.0,
                "topological sorting with dynamic programming": 1.0,
                "topological order traversal": 1.0,
                "dynamic programming for path length calculation": 1.0,
                "adjacency list": 1.0,
                "queue": 1.0,
                "Kruskal's algorithm for Minimum Spanning Tree (MST)": 1.0,
                "sorting edges by cost": 1.0,
                "union-find for cycle detection": 1.0,
                "list": 1.0,
                "tuple": 1.0,
                "brute force with prefix sums": 1.0,
                "prefix sum for subarray sum calculation": 1.0,
                "backtracking with memoization": 1.0,
                "memoization": 1.0,
                "recursive backtracking": 1.0,
                "set": 1.0,
                "dictionary": 1.0,
                "dynamic programming": 4.0,
                "state management": 1.0,
                "in-place updates": 1.0,
                "prefix sum for range sum calculation": 1.0,
                "state transition using DP": 1.0,
                "2D array": 3.0,
                "precomputation of palindromic substrings": 1.0,
                "bottom-up dynamic programming": 1.0,
                "use of a 2D DP table to store intermediate results": 1.0
            },
            "pattern_distribution": {
                "algorithmic_patterns": 2.0,
                "data_structure_patterns": 0.0,
                "optimization_patterns": 0.0,
                "implementation_patterns": 0.0
            }
        },
        "conditionals-data_structures-searching-hard": {
            "success_rate": 0.0,
            "avg_attempts": 3.0,
            "patterns": {
                "breadth-first search (BFS)": 1.0,
                "early exit when treasure is found": 1.0,
                "deque": 1.0,
                "set": 1.0
            },
            "pattern_distribution": {
                "algorithmic_patterns": 0.0,
                "data_structure_patterns": 0.0,
                "optimization_patterns": 0.0,
                "implementation_patterns": 0.0
            }
        },
        "algorithms-dynamic_programming-recursion-searching-very easy": {
            "success_rate": 0.2,
            "avg_attempts": 3.0,
            "patterns": {
                "dynamic programming": 5.0,
                "iterative approach": 3.0,
                "bottom-up calculation": 1.0,
                "array": 3.0,
                "tabulation": 2.0,
                "in-place modification": 1.0,
                "2D array": 2.0,
                "in-place updates": 1.0
            },
            "pattern_distribution": {
                "algorithmic_patterns": 0.0,
                "data_structure_patterns": 0.0,
                "optimization_patterns": 0.0,
                "implementation_patterns": 0.0
            }
        },
        "conditionals-data_structures-searching-sorting-hard": {
            "success_rate": 1.0,
            "avg_attempts": 3.0,
            "patterns": {
                "quickselect algorithm": 1.0,
                "in-place partitioning": 1.0,
                "recursive divide-and-conquer": 1.0,
                "array": 1.0,
                "frequency counting and sorting": 1.0,
                "use of negative frequency to simulate max heap": 1.0,
                "dictionary": 2.0,
                "list": 2.0,
                "hashing": 1.0,
                "use of sorted strings as hash keys": 1.0,
                "sorting and linear traversal": 1.0,
                "sorting to simplify merging": 1.0,
                "hash set for constant time lookups": 1.0,
                "early termination for non-sequence starters": 1.0,
                "hash set": 1.0
            },
            "pattern_distribution": {
                "algorithmic_patterns": 1.0,
                "data_structure_patterns": 0.0,
                "optimization_patterns": 0.0,
                "implementation_patterns": 0.0
            }
        },
        "algorithms-searching-sorting-very hard": {
            "success_rate": 0.6,
            "avg_attempts": 3.0,
            "patterns": {
                "sorting": 3.0,
                "sorting based on computed distance": 1.0,
                "list": 3.0,
                "set": 2.0,
                "binary search": 1.0,
                "partitioning": 1.0,
                "binary search on smaller array": 1.0,
                "array": 1.0,
                "sweep line algorithm": 1.0,
                "event-based processing": 1.0,
                "hash set for O(1) lookups": 1.0,
                "use of set to eliminate duplicates and allow fast lookups": 1.0
            },
            "pattern_distribution": {
                "algorithmic_patterns": 1.0,
                "data_structure_patterns": 0.0,
                "optimization_patterns": 0.0,
                "implementation_patterns": 0.0
            }
        },
        "algorithms-dynamic_programming-error_handling-loops-very hard": {
            "success_rate": 0.4,
            "avg_attempts": 3.0,
            "patterns": {
                "dynamic programming": 11.0,
                "iterative approach": 4.0,
                "array": 6.0,
                "tracking min and max products": 1.0,
                "tabulation": 1.0,
                "2D array": 4.0,
                "early exit for invalid inputs": 1.0,
                "grid traversal": 1.0,
                "in-place updates": 1.0,
                "tracking max and min products to handle negative numbers": 1.0,
                "variables": 1.0,
                "bottom-up approach": 1.0,
                "early termination when limit exceeded": 1.0,
                "early termination": 1.0,
                "modified Kadane's algorithm": 1.0,
                "early termination on error codes": 1.0,
                "resetting current sum": 1.0,
                "stack-based approach": 1.0,
                "single pass traversal": 1.0,
                "stack": 1.0,
                "sliding window": 1.0,
                "dynamic adjustment of window size": 1.0,
                "dictionary": 1.0,
                "resetting subsequence on error code": 1.0,
                "list": 1.0
            },
            "pattern_distribution": {
                "algorithmic_patterns": 1.0,
                "data_structure_patterns": 0.0,
                "optimization_patterns": 0.0,
                "implementation_patterns": 0.0
            }
        },
        "conditionals-data_structures-error_handling-searching-medium": {
            "success_rate": 0.0,
            "avg_attempts": 3.0,
            "patterns": {
                "linear search with validation": 1.0,
                "early exit on find": 1.0,
                "list": 1.0,
                "dictionary": 1.0
            },
            "pattern_distribution": {
                "algorithmic_patterns": 0.0,
                "data_structure_patterns": 0.0,
                "optimization_patterns": 0.0,
                "implementation_patterns": 0.0
            }
        },
        "conditionals-data_structures-error_handling-searching-hard": {
            "success_rate": 0.2,
            "avg_attempts": 3.0,
            "patterns": {
                "hash table lookup": 1.0,
                "preprocessing catalog into a hash table for efficient lookup": 1.0,
                "dictionary": 2.0,
                "recursive search": 1.0,
                "early return on match": 1.0,
                "recursive traversal": 1.0,
                "list": 1.0
            },
            "pattern_distribution": {
                "algorithmic_patterns": 0.0,
                "data_structure_patterns": 0.0,
                "optimization_patterns": 0.0,
                "implementation_patterns": 0.0
            }
        },
        "conditionals-data_structures-dynamic_programming-sorting-medium": {
            "success_rate": 0.0,
            "avg_attempts": 3.0,
            "patterns": {
                "greedy scheduling": 1.0,
                "frequency counting": 1.0,
                "mathematical formula for idle slots": 1.0,
                "dictionary": 1.0,
                "dynamic programming": 1.0,
                "sorting": 1.0,
                "iterative comparison": 1.0,
                "list": 2.0,
                "brute force with set for uniqueness": 1.0,
                "set for uniqueness": 1.0,
                "set": 1.0,
                "dynamic programming with binary search": 1.0,
                "binary search for efficient replacement": 1.0
            },
            "pattern_distribution": {
                "algorithmic_patterns": 0.0,
                "data_structure_patterns": 0.0,
                "optimization_patterns": 0.0,
                "implementation_patterns": 0.0
            }
        },
        "algorithms-error_handling-searching-sorting-very hard": {
            "success_rate": 0.1,
            "avg_attempts": 3.0,
            "patterns": {
                "binary search with error handling": 1.0,
                "two-pointer technique": 2.0,
                "midpoint adjustment": 1.0,
                "array": 2.0,
                "filtering and indexing": 1.0,
                "early termination": 3.0,
                "preserving order while removing duplicates": 1.0,
                "list": 3.0,
                "skip duplicates": 1.0,
                "sliding window": 2.0,
                "early exit for invalid values": 1.0,
                "frequency map for counting": 1.0,
                "dictionary": 2.0,
                "frequency map for duplicate tracking": 1.0,
                "modified binary search": 1.0,
                "divide and conquer": 1.0,
                "recursive approach": 1.0,
                "heap data structure": 1.0,
                "min-heap to maintain k largest elements": 1.0,
                "set": 1.0,
                "min-heap": 1.0,
                "sorting and merging": 1.0,
                "sorting intervals": 1.0,
                "iterative merging": 1.0
            },
            "pattern_distribution": {
                "algorithmic_patterns": 0.0,
                "data_structure_patterns": 1.0,
                "optimization_patterns": 0.0,
                "implementation_patterns": 0.0
            }
        },
        "data_structures-error_handling-recursion-sorting-hard": {
            "success_rate": 0.8,
            "avg_attempts": 3.0,
            "patterns": {
                "recursive merge sort": 1.0,
                "divide and conquer": 2.0,
                "recursion": 1.0,
                "list": 3.0,
                "recursive quick sort": 1.0,
                "in-place partitioning": 1.0,
                "recursive heap sort": 1.0,
                "in-place sorting": 1.0,
                "array": 1.0,
                "recursive bucket sort": 1.0,
                "recursive approach": 1.0,
                "bucket distribution based on range": 1.0
            },
            "pattern_distribution": {
                "algorithmic_patterns": 0.0,
                "data_structure_patterns": 0.0,
                "optimization_patterns": 0.0,
                "implementation_patterns": 0.0
            }
        }
    },
    "pattern_distributions": {
        "algorithms-recursion": {
            "recursion": 5.0,
            "base case optimization": 1.0,
            "none": 1.0,
            "base case for recursion termination": 1.0,
            "primitive integer": 1.0,
            "divide and conquer": 1.0,
            "string": 2.0,
            "tail recursion optimization is not applied": 1.0
        },
        "data_structures-functions-searching-sorting": {
            "heap-based selection": 2.0,
            "use of min-heap to avoid full sorting": 1.0,
            "heap": 3.0,
            "two heaps (min-heap and max-heap)": 1.0,
            "heap balancing": 1.0,
            "min-heap": 4.0,
            "max-heap": 1.0,
            "sliding window with deque": 2.0,
            "use of deque for efficient max tracking": 1.0,
            "deque": 2.0,
            "min-heap to maintain top k elements": 1.0,
            "hashmap": 3.0,
            "hash set for efficient lookups": 1.0,
            "avoid sorting": 1.0,
            "use set for O(1) lookups": 1.0,
            "set": 3.0,
            "sorting": 2.0,
            "use of built-in sorting": 1.0,
            "array": 2.0,
            "binary search": 1.0,
            "partitioning": 1.0,
            "conditional checks": 1.0,
            "hash set for O(1) lookups": 1.0,
            "set for duplicate removal and fast lookups": 1.0,
            "tree traversal": 1.0,
            "set for uniqueness": 1.0,
            "in-order traversal": 1.0,
            "list": 3.0,
            "sliding window": 2.0,
            "character frequency comparison": 1.0,
            "window size management": 1.0,
            "greedy algorithm": 2.0,
            "frequency counting": 2.0,
            "mathematical calculation for scheduling": 1.0,
            "dictionary": 2.0,
            "priority queue (min-heap)": 2.0,
            "maintaining a fixed-size heap": 2.0,
            "priority queue (min-heap) for efficient merging": 1.0,
            "using a heap to maintain the smallest elements across lists": 1.0,
            "dynamic window resizing": 1.0,
            "frequency counting with heap": 1.0,
            "use of heap for efficient top-k extraction": 1.0,
            "Counter": 1.0,
            "hashmap and stack combination": 1.0,
            "use of defaultdict for automatic key initialization": 1.0,
            "hashmap (defaultdict)": 1.0,
            "deque for efficient max tracking": 1.0,
            "sweep line algorithm": 1.0,
            "sorting intervals": 1.0,
            "tracking current overlap": 1.0
        },
        "error_handling-functions-loops-sorting": {
            "validation and sorting": 4.0,
            "early termination on error detection": 1.0,
            "list": 11.0,
            "early return on validation failure": 3.0,
            "sorting and set usage": 1.0,
            "set for uniqueness": 1.0,
            "set": 1.0,
            "sorting and validation": 1.0,
            "early exit on invalid entry": 1.0,
            "dictionary": 1.0,
            "custom sorting with stability check": 1.0,
            "stable sorting using tuple keys": 1.0,
            "sorting": 1.0,
            "stable sort to maintain order of same-length strings": 1.0,
            "iterative processing with sorting": 1.0,
            "early exit on invalid detection": 1.0,
            "combined sorting by multiple criteria": 1.0,
            "sorting with custom key": 1.0,
            "early validation checks": 1.0,
            "use of datetime for parsing": 1.0,
            "tuple": 2.0,
            "iterative processing with validation": 1.0,
            "early exit on validation failure": 2.0
        },
        "algorithms-data_structures-error_handling-searching": {
            "set-based operations": 1.0,
            "thread safety with locks": 1.0,
            "set": 1.0
        },
        "loops-recursion-searching": {
            "depth-first search (DFS)": 1.0,
            "backtracking": 1.0,
            "set": 1.0
        },
        "conditionals-data_structures-searching-sorting": {
            "min-heap": 2.0,
            "heap to maintain k largest elements": 1.0,
            "quickselect algorithm": 1.0,
            "in-place partitioning": 1.0,
            "recursive divide-and-conquer": 1.0,
            "array": 1.0,
            "frequency counting and sorting": 1.0,
            "use of negative frequency to simulate max heap": 1.0,
            "dictionary": 2.0,
            "list": 2.0,
            "hashing": 1.0,
            "use of sorted strings as hash keys": 1.0,
            "sorting and linear traversal": 1.0,
            "sorting to simplify merging": 1.0,
            "hash set for constant time lookups": 1.0,
            "early termination for non-sequence starters": 1.0,
            "hash set": 1.0
        },
        "algorithms-data_structures-loops-sorting": {
            "priority queue (min-heap)": 2.0,
            "use of heap for efficient minimum extraction": 1.0,
            "min-heap": 4.0,
            "hash map and stack combination": 1.0,
            "hash map for frequency counting": 1.0,
            "stack for maintaining order of elements": 1.0,
            "hashmap": 1.0,
            "stack": 1.0,
            "graph traversal": 1.0,
            "depth-first search (DFS)": 1.0,
            "dictionary": 1.0,
            "set": 2.0,
            "greedy algorithm": 2.0,
            "sorting based on end times": 1.0,
            "iterative selection": 1.0,
            "list": 3.0,
            "dynamic programming": 1.0,
            "tracking min and max products": 1.0,
            "in-place updates": 1.0,
            "array": 4.0,
            "maintaining a fixed-size heap": 1.0,
            "using heapq for efficient minimum extraction": 1.0,
            "linked list": 1.0,
            "set-based iteration": 1.0,
            "set for O(1) lookups": 1.0,
            "only start counting from sequence beginnings": 1.0,
            "brute force with optimization": 1.0,
            "Kadane's algorithm for initial max subarray sum": 1.0,
            "sorting": 3.0,
            "sorting by multiple keys": 1.0,
            "tuple": 1.0,
            "greedy approach": 1.0,
            "median-based optimization": 1.0,
            "sorting to find median": 1.0,
            "merging intervals": 1.0
        },
        "functions-loops-recursion-searching": {
            "binary search with recursion": 1.0,
            "divide and conquer": 2.0,
            "array": 2.0,
            "set-based uniqueness filtering": 1.0,
            "use of set to filter unique elements": 1.0,
            "set": 3.0,
            "recursion": 1.0,
            "tail recursion optimization is not applicable in Python": 1.0,
            "list": 3.0,
            "recursive binary search": 1.0,
            "conditional narrowing of search space": 1.0,
            "recursive backtracking": 2.0,
            "none": 1.0,
            "recursive search": 1.0,
            "early return on success": 1.0,
            "dictionary": 2.0,
            "QuickSelect algorithm": 1.0,
            "in-place partitioning": 1.0,
            "iterative approach to avoid recursion overhead": 1.0,
            "recursive backtracking with memoization": 1.0,
            "memoization": 1.0,
            "early termination": 1.0,
            "visited set to avoid revisiting cells": 1.0,
            "bit manipulation": 1.0,
            "bitmasking to check for common letters": 1.0,
            "bitmask (integer)": 1.0,
            "backtracking with trie": 1.0,
            "trie data structure for efficient word lookup": 1.0,
            "early termination using trie nodes": 1.0,
            "trie": 1.0
        },
        "data_structures-dynamic_programming-functions-searching": {
            "binary search with dynamic programming": 1.0,
            "binary search for efficient insertion": 1.0,
            "greedy approach for subsequence maintenance": 1.0,
            "list": 2.0,
            "dynamic programming": 6.0,
            "early termination": 1.0,
            "array": 6.0,
            "sliding window": 1.0,
            "two-pointer technique": 1.0,
            "greedy approach": 1.0,
            "early termination when target is reached": 1.0,
            "bottom-up approach": 1.0,
            "2D array": 4.0,
            "prefix sum with hashmap": 1.0,
            "prefix sum": 1.0,
            "hashmap for quick lookup": 1.0,
            "hashmap": 1.0,
            "greedy algorithm": 1.0,
            "sorting to facilitate unique element determination": 1.0,
            "topological sorting with dynamic programming": 1.0,
            "topological order traversal": 1.0,
            "dynamic programming for path length calculation": 1.0,
            "adjacency list": 1.0,
            "queue": 1.0,
            "Kruskal's algorithm for Minimum Spanning Tree (MST)": 1.0,
            "sorting edges by cost": 1.0,
            "union-find for cycle detection": 1.0,
            "tuple": 1.0,
            "brute force with prefix sums": 1.0,
            "prefix sum for subarray sum calculation": 1.0,
            "backtracking with memoization": 1.0,
            "memoization": 1.0,
            "recursive backtracking": 1.0,
            "set": 1.0,
            "dictionary": 1.0,
            "state management": 1.0,
            "in-place updates": 1.0,
            "prefix sum for range sum calculation": 1.0,
            "state transition using DP": 1.0,
            "precomputation of palindromic substrings": 1.0,
            "bottom-up dynamic programming": 1.0,
            "use of a 2D DP table to store intermediate results": 1.0
        },
        "conditionals-data_structures-searching": {
            "breadth-first search (BFS)": 1.0,
            "early exit when treasure is found": 1.0,
            "deque": 1.0,
            "set": 1.0
        },
        "algorithms-dynamic_programming-recursion-searching": {
            "dynamic programming": 5.0,
            "iterative approach": 3.0,
            "bottom-up calculation": 1.0,
            "array": 3.0,
            "tabulation": 2.0,
            "in-place modification": 1.0,
            "2D array": 2.0,
            "in-place updates": 1.0
        },
        "algorithms-searching-sorting": {
            "sorting": 3.0,
            "sorting based on computed distance": 1.0,
            "list": 3.0,
            "set": 2.0,
            "binary search": 1.0,
            "partitioning": 1.0,
            "binary search on smaller array": 1.0,
            "array": 1.0,
            "sweep line algorithm": 1.0,
            "event-based processing": 1.0,
            "hash set for O(1) lookups": 1.0,
            "use of set to eliminate duplicates and allow fast lookups": 1.0
        },
        "algorithms-dynamic_programming-error_handling-loops": {
            "dynamic programming": 11.0,
            "iterative approach": 4.0,
            "array": 6.0,
            "tracking min and max products": 1.0,
            "tabulation": 1.0,
            "2D array": 4.0,
            "early exit for invalid inputs": 1.0,
            "grid traversal": 1.0,
            "in-place updates": 1.0,
            "tracking max and min products to handle negative numbers": 1.0,
            "variables": 1.0,
            "bottom-up approach": 1.0,
            "early termination when limit exceeded": 1.0,
            "early termination": 1.0,
            "modified Kadane's algorithm": 1.0,
            "early termination on error codes": 1.0,
            "resetting current sum": 1.0,
            "stack-based approach": 1.0,
            "single pass traversal": 1.0,
            "stack": 1.0,
            "sliding window": 1.0,
            "dynamic adjustment of window size": 1.0,
            "dictionary": 1.0,
            "resetting subsequence on error code": 1.0,
            "list": 1.0
        },
        "conditionals-data_structures-error_handling-searching": {
            "linear search with validation": 1.0,
            "early exit on find": 1.0,
            "list": 2.0,
            "dictionary": 3.0,
            "hash table lookup": 1.0,
            "preprocessing catalog into a hash table for efficient lookup": 1.0,
            "recursive search": 1.0,
            "early return on match": 1.0,
            "recursive traversal": 1.0
        },
        "conditionals-data_structures-dynamic_programming-sorting": {
            "greedy scheduling": 1.0,
            "frequency counting": 1.0,
            "mathematical formula for idle slots": 1.0,
            "dictionary": 1.0,
            "dynamic programming": 1.0,
            "sorting": 1.0,
            "iterative comparison": 1.0,
            "list": 2.0,
            "brute force with set for uniqueness": 1.0,
            "set for uniqueness": 1.0,
            "set": 1.0,
            "dynamic programming with binary search": 1.0,
            "binary search for efficient replacement": 1.0
        },
        "algorithms-error_handling-searching-sorting": {
            "binary search with error handling": 1.0,
            "two-pointer technique": 2.0,
            "midpoint adjustment": 1.0,
            "array": 2.0,
            "filtering and indexing": 1.0,
            "early termination": 3.0,
            "preserving order while removing duplicates": 1.0,
            "list": 3.0,
            "skip duplicates": 1.0,
            "sliding window": 2.0,
            "early exit for invalid values": 1.0,
            "frequency map for counting": 1.0,
            "dictionary": 2.0,
            "frequency map for duplicate tracking": 1.0,
            "modified binary search": 1.0,
            "divide and conquer": 1.0,
            "recursive approach": 1.0,
            "heap data structure": 1.0,
            "min-heap to maintain k largest elements": 1.0,
            "set": 1.0,
            "min-heap": 1.0,
            "sorting and merging": 1.0,
            "sorting intervals": 1.0,
            "iterative merging": 1.0
        },
        "data_structures-error_handling-recursion-sorting": {
            "recursive merge sort": 1.0,
            "divide and conquer": 2.0,
            "recursion": 1.0,
            "list": 3.0,
            "recursive quick sort": 1.0,
            "in-place partitioning": 1.0,
            "recursive heap sort": 1.0,
            "in-place sorting": 1.0,
            "array": 1.0,
            "recursive bucket sort": 1.0,
            "recursive approach": 1.0,
            "bucket distribution based on range": 1.0
        }
    }
}